<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zhisheng的博客</title>
  
  <subtitle>坑要一个个填，路要一步步走！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-24T16:00:53.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zhisheng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot ActiveMQ 整合使用</title>
    <link href="http://yoursite.com/2018/01/27/SpringBoot-ActiveMQ/"/>
    <id>http://yoursite.com/2018/01/27/SpringBoot-ActiveMQ/</id>
    <published>2018-01-26T16:00:00.000Z</published>
    <updated>2018-01-24T16:00:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fns53btbl0j31hc0zldyz.jpg" alt="busan-night-scene-1747130_1920"></p><h3 id="介绍-ActiveMQ"><a href="#介绍-ActiveMQ" class="headerlink" title="介绍 ActiveMQ"></a>介绍 ActiveMQ</h3><p>它是 Apache 出品，最流行的，能力强劲的开源消息总线。ActiveMQ  是一个完全支持 JMS1.1 和 J2EE 1.4 规范的 JMS Provider 实现，尽管 JMS 规范出台已经是很久的事情了，但是 JMS 在当今的J2EE应用中间仍然扮演着特殊的地位。—— 摘自百度百科，偷了个懒。</p><a id="more"></a><h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><p>1、<a href="http://www.54tianzhisheng.cn/2018/01/05/SpringBoot-Kafka/" target="_blank" rel="noopener">SpringBoot Kafka 整合使用</a></p><p>2、<a href="http://www.54tianzhisheng.cn/2018/01/26/SpringBoot-RabbitMQ/" target="_blank" rel="noopener">SpringBoot RabbitMQ 整合使用</a></p><h3 id="安装-ActiveMQ"><a href="#安装-ActiveMQ" class="headerlink" title="安装 ActiveMQ"></a>安装 ActiveMQ</h3><p>同之前一样，直接在 Docker 里面玩吧。命令也是一行解决：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8161:8161 -p 61616:61616 -e ACTIVEMQ_ADMIN_LOGIN=admin -e ACTIVEMQ_ADMIN_PASSWORD=admin --name activemq webcenter/activemq</span><br></pre></td></tr></table></figure><p>简单解释下：</p><ul><li>8186: 表示 ActiveMQ 控制台端口号，它和 RabbitMQ 一样都是有控制台的，可以登陆控制台进行操作的</li><li>61616 ： 表示 ActiveMQ 所监听的 TCP 端口号，应用程序可通过该端口号与 ActiveMQ 建立 TCP 连接</li><li>CTIVEMQ_ADMIN_LOGIN ：登陆控制台的用户名</li><li>ACTIVEMQ_ADMIN_PASSWORD ：登陆控制台的密码</li></ul><p>执行后，可在浏览器输入 <a href="http://localhost:8161/" target="_blank" rel="noopener">http://localhost:8161/</a>   查看控制台，</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fns4zm1yqfj31kw0djn3k.jpg" alt="Snip20180124_1"></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fns4zmk78ej31kw0ladq0.jpg" alt="Snip20180124_2"></p><p>解释下上面图片中控制台这些按钮的基本信息：</p><ul><li>Home：查看 ActiveMQ 的常见信息</li><li>Queues：查看 ActiveMQ 的队列信息</li><li>Topics：查看 ActiveMQ 的主题信息</li><li>Subscribers：查看主题的订阅者信息</li><li>Connections：查看 ActiveMQ 客户端的连接信息</li><li>Network：查看 ActiveMQ 的网络信息</li><li>Scheduled：查看 ActiveMQ 的定时任务</li><li>Send：用于通过表单方式向队列或者主题发送具体的消息</li></ul><h3 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h3><p>IDEA 创建 SpringBoot 项目，因为 SpringBoot 已经内置了对 ActiveMQ 的支持，所以直接引入依赖 <code>spring-boot-starter-activemq</code> 就行。整体项目结构如下：</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fns4zkpkhvj30os0tkwg8.jpg" alt="Snip20180124_3"></p><p>1、<strong>pom.xml 文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhisheng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>activemq<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot ActiveMQ<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-activemq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、<strong>配置文件</strong>  application.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.activemq.broker-url=tcp://localhost:61616</span><br><span class="line">spring.activemq.user=admin</span><br><span class="line">spring.activemq.password=admin</span><br></pre></td></tr></table></figure><p>3、<strong>发送消息类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhisheng.activemq.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jms.core.JmsTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveMQClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JmsTemplate jmsTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        jmsTemplate.convertAndSend(<span class="string">"zhisheng"</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样，和 RabbitMQ 类似，不多说了。</p><p>4、<strong>消息接收类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhisheng.activemq.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.jms.annotation.JmsListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveMQServer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@JmsListener</span>(destination = <span class="string">"zhisheng"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"收到的 message 是："</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhisheng.activemq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhisheng.activemq.client.ActiveMQClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StopWatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivemqApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    ActiveMQClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">        stopWatch.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            client.send(<span class="string">"发送消息----zhisheng-----"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        stopWatch.stop();</span><br><span class="line">        System.out.println(<span class="string">"发送消息耗时: "</span> + stopWatch.getTotalTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(ActivemqApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发送一万条消息运行后需要的时间挺久的：73180 ms</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fns4zlmbg7j31kw0wutop.jpg" alt="Snip20180124_4"></p><p>比 RabbitMQ 发送 10000 条消息耗时 215 ms 不知道高出多少倍了，可见其性能并不高的。</p><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180103/C6LG3mGa12.jpg" alt="mark"></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>转载请务必注明原创地址为：<a href="http://www.54tianzhisheng.cn/2018/01/27/SpringBoot-ActiveMQ/" target="_blank" rel="noopener">http://www.54tianzhisheng.cn/2018/01/27/SpringBoot-ActiveMQ/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tKfTcly1fns53btbl0j31hc0zldyz.jpg&quot; alt=&quot;busan-night-scene-1747130_1920&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;介绍-ActiveMQ&quot;&gt;&lt;a href=&quot;#介绍-ActiveMQ&quot; class=&quot;headerlink&quot; title=&quot;介绍 ActiveMQ&quot;&gt;&lt;/a&gt;介绍 ActiveMQ&lt;/h3&gt;&lt;p&gt;它是 Apache 出品，最流行的，能力强劲的开源消息总线。ActiveMQ  是一个完全支持 JMS1.1 和 J2EE 1.4 规范的 JMS Provider 实现，尽管 JMS 规范出台已经是很久的事情了，但是 JMS 在当今的J2EE应用中间仍然扮演着特殊的地位。—— 摘自百度百科，偷了个懒。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
      <category term="ActiveMQ" scheme="http://yoursite.com/tags/ActiveMQ/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot  RabbitMQ 整合使用</title>
    <link href="http://yoursite.com/2018/01/26/SpringBoot-RabbitMQ/"/>
    <id>http://yoursite.com/2018/01/26/SpringBoot-RabbitMQ/</id>
    <published>2018-01-25T16:00:00.000Z</published>
    <updated>2018-01-24T09:25:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180107/6DFKcmCgC7.png-1" alt="mark"></p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>上次写了篇文章，<a href="http://www.54tianzhisheng.cn/2018/01/05/SpringBoot-Kafka/" target="_blank" rel="noopener">《SpringBoot Kafka 整合使用》</a>，阅读量还挺高的，于是想想还是把其他几种 MQ 也和 SpringBoot 整合使用下。</p><a id="more"></a><p>下面是四种比较流行的 MQ ：</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fnrqdwnlsej30fw07274m.jpg" alt="rabbitmq-1"></p><p>后面都写写和 SpringBoot 整合的文章。</p><h3 id="安装-RabbitMQ"><a href="#安装-RabbitMQ" class="headerlink" title="安装 RabbitMQ"></a>安装 RabbitMQ</h3><p>由于换 Mac 了，所以一些环境就直接在 Mac 搞，但是像安装 RabbitMQ 这些又会把自己电脑系统给搞的太乱，所以能在 Docker 里面安装就安装在 Docker，这次 RabbitMQ 我也直接在 Docker 里安装。</p><p>启动 Docker for Mac，如果没安装过的请看我上一篇文章：<a href="http://www.54tianzhisheng.cn/2018/01/25/Docker-install/" target="_blank" rel="noopener">http://www.54tianzhisheng.cn/2018/01/25/Docker-install/</a></p><p>当然你也可以在自己的 Linux 服务器或者虚拟机里启动安装 RabbitMQ 。</p><p>Docker 安装的话很简单，因为 RabbitMQ 官方已经提供了自己的 Docker 容器，只需要一行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d  -p 15672:15672  -p  5672:5672  -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin --name rabbitmq rabbitmq:3-management</span><br></pre></td></tr></table></figure><p>该镜像拥有一个基于 web 的控制台和 Http API。Http API 可以在地址看到如何使用：<code>http://localhost:15672/api/</code></p><p>讲解下上面命令行：</p><ul><li>15672 ：表示 RabbitMQ 控制台端口号，可以在浏览器中通过控制台来执行 RabbitMQ 的相关操作。</li><li>5672 : 表示 RabbitMQ 所监听的 TCP 端口号，应用程序可通过该端口与 RabbitMQ 建立 TCP 连接，并完成后续的异步消息通信</li><li>RABBITMQ_DEFAULT_USER：用于设置登陆控制台的用户名，这里我设置 admin</li><li>RABBITMQ_DEFAULT_PASS：用于设置登陆控制台的密码，这里我设置 admin</li></ul><p>容器启动成功后，可以在浏览器输入地址：<a href="http://localhost:15672/" target="_blank" rel="noopener">http://localhost:15672/</a>  访问控制台</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fnrqdzkxzoj30js0980t7.jpg" alt="rabbitmq-2"></p><p>登陆后：</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fnrqohaja0j31kw0vr0z3.jpg" alt="rabbitmq-3"></p><p>简单描述下上图中中控制台的列表的作用：</p><ul><li>Overview ：用于查看 RabbitMQ 的一些基本信息（消息队列、消息发送速率、节点、端口和上下文信息等）</li><li>Connections：用于查看 RabbitMQ 客户端的连接信息</li><li>Channels：用户查看 RabbitMQ 的通道信息</li><li>Exchange：用于查看 RabbitMQ 交换机</li><li>Queues：用于查看 RabbitMQ 的队列</li><li>Admin：用于管理用户，可增加用户</li></ul><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>在 IDEA 中创建一个 SpringBoot 项目结构：</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fnrqp4fi3cj30pk12qtcc.jpg" alt="Snip20180124_5"></p><p>SpringBoot 框架中已经内置了对 RabbitMQ 的支持，如果你看过官方文档的话，就可以看到的，我们需要把依赖 spring-boot-starter-amqp 引入就行。</p><p>1、 <strong>pom.xml</strong> 引入依赖后如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhisheng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rabbitmq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>rabbitmq<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot RabbitMQ<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、<strong>application.properties</strong>  配置修改如下：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.rabbitmq.addresses=localhost:5672</span><br><span class="line">spring.rabbitmq.username=admin</span><br><span class="line">spring.rabbitmq.password=admin</span><br></pre></td></tr></table></figure><p>3、<strong>消息发送类</strong> RabbitMQClient.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhisheng.rabbitmq.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by zhisheng_tian on 2018/1/23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">"zhisheng"</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就这样，发送消息代码就实现了。</p><p>这里关键的代码为 rabbitTemplate.convertAndSend() 方法，<code>zhisheng</code> 这个是路由规则（routingKey），它的值表明将消息发送到指定的队列 <code>zhisheng</code> 中去，这里跟了下源码，发现 convertAndSend() 方法最后调用的方法其实是一个 doSend() 方法。</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fnrqpy395kj31kw0wkn75.jpg" alt="Snip20180124_7"></p><p>4、<strong>消息接收类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhisheng.rabbitmq.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by zhisheng_tian on 2018/1/23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = <span class="string">"zhisheng"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"收到的 message 是："</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你看，这里就有个 <code>RabbitListener</code> 一直在监听着队列 <code>zhisheng</code> 。</p><p>当然这个队列是必须要我们自己在应用程序中创建好，它不会像我之前写的文章 <a href="http://www.54tianzhisheng.cn/2018/01/05/SpringBoot-Kafka/" target="_blank" rel="noopener">《SpringBoot Kafka 整合使用》</a>  中的 Kafka 一样，Kafka 它会在用到队列的时候动态的创建，不需要我们提前创建好。</p><p>那么在 RabbitMQ 中该如何创建队列呢？</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fnrqqcykkoj31kw0roajh.jpg" alt="Snip20180124_8"></p><p>如上图所示：这样我们就创建好了一个 <code>zhisheng</code> 的队列，当程序开始运行时，消息接收类会持续监听队列 <code>zhisheng</code> 中即将到来的消息。</p><p>5、<strong>运行项目</strong></p><p>需要在启动类中注入发送消息的类，并且提供 init 方法，在 init 方法中调用发送消息类的 send()  方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">rabbitMQClient.send(<span class="string">"发送消息----zhisheng-----"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是：init() 方法带有 @PostConstruct 注解，被 @PostConstruct 修饰的方法会在构造函数之后执行。</p><p>启动项目就可以发现控制台已经接收到消息了。</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fnrqqqr9zlj31kw10qdv6.jpg" alt="Snip20180124_9"></p><p>6、<strong>单线程测试性能</strong></p><p>看到上面图片中注释掉的代码没？那就是用来测试消息发送的性能的，我发送 10000 条消息看看总共耗时多少。</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fnrqr3c0wnj31kw0tctgm.jpg" alt="Snip20180124_10"></p><p>10000 条消息发送耗时：215ms。   这是在单线程下，下次可以和其他的 MQ 测试对比下，并且也可以在多线程的环境下测试性能。</p><p>同时从控制台可以看到发送的速率：</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fnrqrd94g6j31kw0s1tim.jpg" alt="Snip20180124_11"></p><p>7、<strong>多线程测试性能</strong></p><p>开了10 个线程，每个线程发送 10000 条消息。</p><p>init  方法代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">        stopWatch.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> threads = <span class="number">10</span>;</span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(threads);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> CountDownLatch start = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">final</span> CountDownLatch end = <span class="keyword">new</span> CountDownLatch(threads);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads; i++) &#123;</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    start.await();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i1 = <span class="number">0</span>; i1 &lt; <span class="number">10000</span>; i1++) &#123;</span><br><span class="line">                        rabbitMQClient.send(<span class="string">"发送消息----zhisheng-----"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    end.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        start.countDown();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            end.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            executorService.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        stopWatch.stop();</span><br><span class="line">        System.out.println(<span class="string">"发送消息耗时："</span> + stopWatch.getTotalTimeMillis());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>耗时：4063ms</p><p>控制台显示如下图：</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fnrqrt6ngfj31kw0ul47b.jpg" alt="Snip20180124_12"></p><p>8、<strong>注意</strong></p><p>这里测试发送的消息直接是 String 类型的，你也可以测试下 Bean 类，这需要注意需要序列化。</p><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180103/C6LG3mGa12.jpg" alt="mark"></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>转载请务必注明原创地址为：<a href="http://www.54tianzhisheng.cn/2018/01/26/SpringBoot-RabbitMQ/" target="_blank" rel="noopener">http://www.54tianzhisheng.cn/2018/01/26/SpringBoot-RabbitMQ/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/blog/180107/6DFKcmCgC7.png-1&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h3&gt;&lt;p&gt;上次写了篇文章，&lt;a href=&quot;http://www.54tianzhisheng.cn/2018/01/05/SpringBoot-Kafka/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《SpringBoot Kafka 整合使用》&lt;/a&gt;，阅读量还挺高的，于是想想还是把其他几种 MQ 也和 SpringBoot 整合使用下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
      <category term="RabbitMQ" scheme="http://yoursite.com/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>Mac 安装 Docker 及常用命令</title>
    <link href="http://yoursite.com/2018/01/25/Docker-install/"/>
    <id>http://yoursite.com/2018/01/25/Docker-install/</id>
    <published>2018-01-24T16:00:00.000Z</published>
    <updated>2018-01-24T09:25:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180107/mALkf4CKA2.png-1" alt="mark"></p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>微服务 + 容器，完美的一对！必须得好好学习学习。</p><a id="more"></a><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p>Mac 下 Docker 的安装真心建议跟着官方的文档走一遍，官网已经讲的很详细了。</p><p><a href="https://docs.docker.com/docker-for-mac/install/#what-to-know-before-you-install" target="_blank" rel="noopener">https://docs.docker.com/docker-for-mac/install/#what-to-know-before-you-install</a></p><h3 id="使用-Docker-for-Mac"><a href="#使用-Docker-for-Mac" class="headerlink" title="使用 Docker for Mac"></a>使用 Docker for Mac</h3><p><a href="https://docs.docker.com/docker-for-mac/#check-versions-of-docker-engine-compose-and-machine" target="_blank" rel="noopener">https://docs.docker.com/docker-for-mac/#check-versions-of-docker-engine-compose-and-machine</a></p><h3 id="配置-Docker-加速器"><a href="#配置-Docker-加速器" class="headerlink" title="配置 Docker 加速器"></a>配置 Docker 加速器</h3><p>Docker 加速器是什么，我需要使用吗？</p><p>使用 Docker 的时候，需要经常从官方获取镜像，但是由于显而易见的网络原因，拉取镜像的过程非常耗时，严重影响使用 Docker 的体验。因此 DaoCloud 推出了加速器工具解决这个难题，通过智能路由和缓存机制，极大提升了国内网络访问 Docker Hub 的速度，目前已经拥有了广泛的用户群体，并得到了 Docker 官方的大力推荐。如果您是在国内的网络环境使用 Docker，那么 Docker 加速器一定能帮助到您。</p><p>注册 <a href="">daocloud</a>，然后在 mac 标签页复制加速器 url。</p><p><img src="https://upload-images.jianshu.io/upload_images/5225109-54fdf15443d355fd.png?imageMogr2/auto-orient/" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/5225109-8dd1076f952fda33.png?imageMogr2/auto-orient/" alt=""></p><h3 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h3><p>跟着下面的文章进行敲一遍，熟悉下 Docker 整个的使用。</p><p><a href="https://www.jianshu.com/p/cf6e7248b6c7" target="_blank" rel="noopener">https://www.jianshu.com/p/cf6e7248b6c7</a></p><h3 id="Docker-常用命令"><a href="#Docker-常用命令" class="headerlink" title="Docker 常用命令"></a>Docker 常用命令</h3><p>下面列出些自己常用的命令，目的就是记录下来，以后忘记了，再拿来跟着敲就行！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">docker run -i -t &lt;image_name/continar_id&gt; /bin/bash  启动容器并启动bash（交互方式）</span><br><span class="line"></span><br><span class="line">docker run -d -it  image_name   启动容器以后台方式运行(更通用的方式）</span><br><span class="line"></span><br><span class="line">docker ps   列出当前所有正在运行的container</span><br><span class="line"></span><br><span class="line">docker ps -a  列出所有的container</span><br><span class="line"></span><br><span class="line">docker ps -l   列出最近一次启动的container</span><br><span class="line"></span><br><span class="line">docker images  列出本地所有的镜像</span><br><span class="line"></span><br><span class="line">docker rmi imagesID   删除指定的镜像id</span><br><span class="line"></span><br><span class="line">docker rm CONTAINER ID   删除指定的CONTAINER id</span><br><span class="line"></span><br><span class="line">docker diff 镜像名    查看容器的修改部分</span><br><span class="line"></span><br><span class="line">docker kill CONTAINER ID   杀掉正在运行的容器</span><br><span class="line"></span><br><span class="line">docker logs 容器ID/name   可以查看到容器主程序的输出</span><br><span class="line"></span><br><span class="line">docker pull image_name    下载image</span><br><span class="line"></span><br><span class="line">docker push image_name   发布docker镜像</span><br><span class="line"></span><br><span class="line">docker version   查看docker版本</span><br><span class="line"></span><br><span class="line">docker info   查看docker系统的信息</span><br><span class="line"></span><br><span class="line">docker inspect 容器的id 可以查看更详细的关于某一个容器的信息</span><br><span class="line"></span><br><span class="line">docker run -d  image-name   后台运行镜像</span><br><span class="line"></span><br><span class="line">docker search 镜像名    查找公共的可用镜像</span><br><span class="line"></span><br><span class="line">docker stop 容器名/容器 ID      终止运行的容器</span><br><span class="line"></span><br><span class="line">docker restart 容器名/容器 ID    重启容器</span><br><span class="line"></span><br><span class="line">docker commit  提交，创建个新镜像</span><br><span class="line"></span><br><span class="line">docker build [OPTIONS] PATH | URL | -   利用 Dockerfile 创建新镜像</span><br></pre></td></tr></table></figure><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180103/C6LG3mGa12.jpg" alt="mark"></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>转载请注明地址：<a href="http://www.54tianzhisheng.cn/2018/01/25/Docker-install/" target="_blank" rel="noopener">http://www.54tianzhisheng.cn/2018/01/25/Docker-install/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/blog/180107/mALkf4CKA2.png-1&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;微服务 + 容器，完美的一对！必须得好好学习学习。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>MacBook Pro 初体验</title>
    <link href="http://yoursite.com/2018/01/24/mac/"/>
    <id>http://yoursite.com/2018/01/24/mac/</id>
    <published>2018-01-23T16:00:00.000Z</published>
    <updated>2018-01-23T16:14:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180107/kFhlh5gA23.png-1" alt="mark"></p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><a id="more"></a><p>在 Mac 到手之前就在各种群里看到人说 Mac 多好用，也有很多人鼓吹过 Mac 的好处，最后也坚定我的年前目标了 —— 就是买台 Mac，之前请原谅我这个穷鬼，买不起，现在买了 Mac 后更加得体谅我这个穷鬼了，毕竟在上海这个城市，靠着实习工资买这种奢侈品，不容易啊😄 。废话不多说，如果愿意支持我的，请在文章底部扫描二维码，在此先谢谢了。</p><h3 id="如何挑选？"><a href="#如何挑选？" class="headerlink" title="如何挑选？"></a>如何挑选？</h3><p>MacBook 主要分两系列：MacBook Air 和 MacBook Pro。</p><p>Air 的话个人感觉配置不高，如果是开发还是建议买 Pro 系列的。如今买的话，可能还会分 2015 款、2016 款、2017 款。每款中又分 内存大小（8/16g）、硬盘大小（128/256/512g）、CPU、处理器（i5/i7）、是否有TouchBar、显卡等。不同配置对应电脑的型号也是不一样的。下面直接上一张在我的特殊渠道里的报价表截图吧。（想了解的可以找我）</p><p><img src="http://ohfk1r827.bkt.clouddn.com/mac-1.jpg-1" alt="mac-1"></p><p>光这型号，不懂的人还真不会挑。</p><p>不得不说，苹果电脑真尼玛难挑啊，如果你是土豪，那不用挑了，直接上最高价钱的吧。</p><p>然后可以从配置中发现 2016 款和 2017 款变化真心不大，在同等配置下，2017 款几乎比 2016 款价格高个 3000 来块。</p><p>然后就是 512 G 硬盘比 256 G 也几乎贵个 2000 多。</p><p>16G 那是必须的上啊，标配了，8G 就不说了，太小了。</p><p>含 TouchBar，虽然确实用处不大，不过调音两还是不错的。高配都有 TouchBar 的。</p><p>出于 <strong>qiong</strong> ，我买了 2016 款，配置是：</p><p><img src="http://ohfk1r827.bkt.clouddn.com/mac-2.jpg-1" alt="mac-2"></p><p>不过现在 2016 款好像停产了。</p><h3 id="到手"><a href="#到手" class="headerlink" title="到手"></a>到手</h3><p>2018.01.11 下午六点快递送到的，很开心。晚上拿回家拆箱，第一件事情就是检查序列号啊，上面的图片打码掉的就是序列号，这个序列号在电脑机身、系统、外牛皮癣盒都有的，可以在官网查询这个序列号，获得电脑的激活日期和剩余保修时间的。再就是查询电脑的电池循环次数了，我的是一次，一般好像是几次之内都是符合的。证明之前没被别人用过，这个数字我也忘记了。</p><h3 id="熟悉系统"><a href="#熟悉系统" class="headerlink" title="熟悉系统"></a>熟悉系统</h3><p>Mac 系统是类 Unix 系统，其实我觉得到和 Ubuntu 系统挺像的，既有图形化界面，也可以命令行操作。熟悉过 Linux 的应该上手很快的。</p><h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h3><p>可以在 Appstore 里面下载，也可以在一些软件的官网直接下载 mac 版的。安装也挺简单的。如果你不知道有什么软件可以安装，那么我这里给你份 Mac 软件参考列表：<a href="https://github.com/jaywcjlove/awesome-mac/blob/master/README-zh.md" target="_blank" rel="noopener">https://github.com/jaywcjlove/awesome-mac/blob/master/README-zh.md</a></p><p>当然了，上面的不一定全，具体用到其他的还是的自己去找对应的软件。</p><p>还有就是好多软件是收费的，在 Mac 上如果要下载的话，还的费点心思去破解，比如 Office、IDEA、Adobe 系列等，当然也不是鼓吹大家去破解，我们自己用用就行，虽说现在没钱支持，但是有钱的话还是支持下。我一个写博客的知道写博客的不容易，那写软件的更不容易了，能支持一两块也挺好的。</p><p>然后就是美化下我们的一些软件，比如我们的终端之类的、尽量使用 Homebrew 安装软件。当然这篇文章不会写这些的，改天专门写篇文章写这个话题。</p><p>还有就是在 Mac 上从新打造一个适合自己的新写作环境（软件、Hexo 写博客环境）。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>体验了 Mac 也有一个多礼拜了，整体效果还是不错的，毕竟花了巨资呢，也算是完成了自己年前的小目标。先 bb 到这里吧。有时间再写点关于 Mac 上的东西，这次写的比较简单，这篇文章也是在 Mac 上写的第一篇文章。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/blog/180107/kFhlh5gA23.png-1&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;
    
    </summary>
    
    
      <category term="Mac" scheme="http://yoursite.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot Admin 使用指南</title>
    <link href="http://yoursite.com/2018/01/17/SpringBoot-Admin/"/>
    <id>http://yoursite.com/2018/01/17/SpringBoot-Admin/</id>
    <published>2018-01-16T16:00:00.000Z</published>
    <updated>2018-01-21T11:25:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180107/m1b2jfCc9I.png-1" alt="mark"></p><h3 id="什么是-SpringBoot-Admin？"><a href="#什么是-SpringBoot-Admin？" class="headerlink" title="什么是 SpringBoot Admin？"></a>什么是 SpringBoot Admin？</h3><p>Spring Boot Admin 是一个管理和监控你的 Spring Boot 应用程序的应用程序。 这些应用程序通过 Spring Boot Admin Client（通过 HTTP）注册或者使用 Spring Cloud（例如 Eureka）发现。 UI只是 Spring Boot Actuator 端点上的一个 AngularJs 应用程序。<br><a id="more"></a></p><h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><p>首先在 IDEA 创建一个 SpringBoot 项目，把它当作 server 端，工程如下：</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180117/hIKaIkCE8a.png-1" alt="mark"></p><p>然后在 pom.xml 中引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-server-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>继续在启动类 SpringbootAdminApplication.java 中引入注解 <strong>@EnableAdminServer</strong> ，然后运行项目：</p><p>访问 <a href="http://localhost:8084/" target="_blank" rel="noopener">http://localhost:8084/</a>  即可：</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180117/C55mBbf8LH.png-1" alt="mark"></p><p>此时会发现没有任何应用程序的信息。</p><p>接下来我们新建一个 SpringBoot 项目，把它当作客户端程序，工程如下：</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180117/9EGaFH3Gb7.png-1" alt="mark"></p><p>在 pom.xml 中添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在 application.yml 中设置：</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180117/3AL0J6I16b.png-1" alt="mark"></p><p>spring.boot.admin.url=http:localhost:8094 用于将当前应用注册到 Spring Boot Admin。</p><p>还可以设置，spring.boot.admin.client.name: （应用程序的名字）不设置的话会有默认的名字</p><p>此时把两个项目运行起来：</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180117/IGEBDm4eJ7.png-1" alt="mark"></p><p>点击图中的 <strong>detail</strong> 按钮：可以看到应用程序的健康值、内存、JVM、GC 等信息。</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180117/GJBjGF512G.png-1" alt="mark"></p><p><strong>metrics</strong> 信息：</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180117/gdbj21Fk19.png-1" alt="mark"></p><p><strong>环境</strong> 信息：</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180117/eglbcgE9C5.png-1" alt="mark"></p><p><strong>log</strong> 信息：</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180117/IkeJkaEGcI.png-1" alt="mark"></p><p><strong>JMX</strong> 信息：</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180117/e3Ei3l6ieF.png-1" alt="mark"></p><p><strong>线程</strong> 信息：</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180117/ClFekkJKB8.png-1" alt="mark"></p><p><strong>Trace</strong> 追踪信息：</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180117/J6m9b43F8d.png-1" alt="mark"></p><p>还可以下载 Heapdump 文件。</p><p>刚才首页的应用列表后面有个红色的 ×，我们可以将注册上去的应用移除，但是只要你不把程序停掉，它立马又会注册上去。</p><p>还有就是应用列表的 version 和 info 上面的图中为空，下面看看怎么把它变出来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">info.groupId: @project.groupId@</span><br><span class="line">info.artifactId: @project.artifactId@</span><br><span class="line">info.version: @project.version@</span><br></pre></td></tr></table></figure><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180117/3E5hlG7heJ.png-1" alt="mark"></p><p>重新运行客户端程序，刷新页面可以发现：</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180117/A0FBLLK9LE.png-1" alt="mark"></p><p>还可以查询应用程序的事件变化：</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180117/E9LfBJGaB3.png-1" alt="mark"></p><h3 id="客户端应用程序"><a href="#客户端应用程序" class="headerlink" title="客户端应用程序"></a>客户端应用程序</h3><h4 id="JMX-bean管理"><a href="#JMX-bean管理" class="headerlink" title="JMX bean管理"></a>JMX bean管理</h4><p>要在管理界面中与JMX-beans进行交互，您必须在客户端应用程序中包含 Jolokia,</p><p>pom.xml 加入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jolokia<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jolokia-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>重启客户端程序后，就可以在这里与 JMX 做交互了：</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180117/g82cD16kBf.png-1" alt="mark"></p><p>还有很多 SpringBoot Admin 客户端配置选项：</p><p><a href="http://codecentric.github.io/spring-boot-admin/1.5.6/#spring-boot-admin-client" target="_blank" rel="noopener">http://codecentric.github.io/spring-boot-admin/1.5.6/#spring-boot-admin-client</a></p><h3 id="服务端程序"><a href="#服务端程序" class="headerlink" title="服务端程序"></a>服务端程序</h3><p>也有些 SpringBoot Admin 服务端程序配置选项：</p><p><a href="http://codecentric.github.io/spring-boot-admin/1.5.6/#spring-boot-admin-server" target="_blank" rel="noopener">http://codecentric.github.io/spring-boot-admin/1.5.6/#spring-boot-admin-server</a></p><p>官方文档里面还有些关于服务下线消息通知的知识，想了解的可以查看：</p><p><a href="http://codecentric.github.io/spring-boot-admin/1.5.6/#_notifications" target="_blank" rel="noopener">http://codecentric.github.io/spring-boot-admin/1.5.6/#_notifications</a></p><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180103/C6LG3mGa12.jpg" alt="mark"></p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="">http://codecentric.github.io/spring-boot-admin/1.5.6/</a></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>转载请注明文章原始地址为：<a href="http://www.54tianzhisheng.cn/2018/01/17/SpringBoot-Admin/" target="_blank" rel="noopener">http://www.54tianzhisheng.cn/2018/01/17/SpringBoot-Admin/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/blog/180107/m1b2jfCc9I.png-1&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;什么是-SpringBoot-Admin？&quot;&gt;&lt;a href=&quot;#什么是-SpringBoot-Admin？&quot; class=&quot;headerlink&quot; title=&quot;什么是 SpringBoot Admin？&quot;&gt;&lt;/a&gt;什么是 SpringBoot Admin？&lt;/h3&gt;&lt;p&gt;Spring Boot Admin 是一个管理和监控你的 Spring Boot 应用程序的应用程序。 这些应用程序通过 Spring Boot Admin Client（通过 HTTP）注册或者使用 Spring Cloud（例如 Eureka）发现。 UI只是 Spring Boot Actuator 端点上的一个 AngularJs 应用程序。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Lombok 看这篇就够了</title>
    <link href="http://yoursite.com/2018/01/09/lombok/"/>
    <id>http://yoursite.com/2018/01/09/lombok/</id>
    <published>2018-01-08T16:00:00.000Z</published>
    <updated>2018-01-21T13:10:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180107/7JfK07cCbh.png-1" alt="mark"></p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>自从进公司实习后，项目代码中能用 Lombok 的都用了，毕竟这么好的轮子要充分利用好。也可以减少一些 get/set/toString 方法的编写，虽说 IDEA 的插件可以自动生成 get/set/toString 方法，但是使用 Lombok 可以让代码更简洁。<br><a id="more"></a><br>下面看看如何在 IDEA　中如何安装 Lombok：</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>打开 IDEA 的 Settings 面板，并选择 Plugins 选项，然后点击 “Browse repositories”</p><p>在输入框输入”lombok”，得到搜索结果，点击安装，然后安装提示重启 IDEA，安装成功;</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180106/C33FG37Gk4.png-1" alt="mark"></p><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>在自己的项目里添加 lombok 的编译支持，在 pom 文件里面添加 dependency</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.16.18&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="怎么使用？"><a href="#怎么使用？" class="headerlink" title="怎么使用？"></a>怎么使用？</h3><p>在实体类上引入相关的注解就行：</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180106/aCEc8ileJg.png-1" alt="mark"></p><h3 id="有哪些注解？"><a href="#有哪些注解？" class="headerlink" title="有哪些注解？"></a>有哪些注解？</h3><ul><li>@Data</li><li>@Setter</li><li>@Getter</li><li>@Slf4j</li><li>@AllArgsConstructor</li><li>@NoArgsConstructor</li><li>@EqualsAndHashCode</li><li>@NonNull</li><li>@Cleanup</li><li>@ToString</li><li>@RequiredArgsConstructor</li><li>@Value</li><li>@SneakyThrows</li><li>@Synchronized</li></ul><h3 id="注解详解"><a href="#注解详解" class="headerlink" title="注解详解"></a>注解详解</h3><p><strong>@Data</strong></p><p>注解在 <strong>类</strong> 上；提供类所有属性的 get 和 set 方法，此外还提供了equals、canEqual、hashCode、toString 方法。</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180107/mHj1eak6fJ.png-1" alt="mark"></p><p><strong>@Setter</strong></p><p>注解在 <strong>属性</strong> 上；为单个属性提供 set 方法; 注解在 <strong>类</strong> 上，为该类所有的属性提供 set 方法， 都提供默认构造方法。</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180107/lkkff2b6Dc.png-1" alt="mark"></p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180107/J9mC8FGfc0.png-1" alt="mark"></p><p><strong>@Getter</strong></p><p>注解在 <strong>属性</strong> 上；为单个属性提供 get 方法; 注解在 <strong>类</strong> 上，为该类所有的属性提供 get 方法，都提供默认构造方法。</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180107/d0F5h97J5f.png-1" alt="mark"></p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180107/K0m81cFd6g.png-1" alt="mark"></p><p><strong>@Slf4j</strong></p><p>注解在 <strong>类</strong> 上；为类提供一个 属性名为 log 的日志对象，提供默认构造方法。</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180107/BChd89Cbh5.png-1" alt="mark"></p><p><strong>@AllArgsConstructor</strong></p><p>注解在 <strong>类</strong> 上；为类提供一个全参的构造方法，加了这个注解后，类中不提供默认构造方法了。</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180107/4iji9AJ0fE.png-1" alt="mark"></p><p><strong>@NoArgsConstructor</strong></p><p>注解在 <strong>类</strong> 上；为类提供一个无参的构造方法。</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180107/JcdfmhDAaB.png-1" alt="mark"></p><p><strong>@EqualsAndHashCode</strong></p><p>注解在 <strong>类</strong> 上, 可以生成 equals、canEqual、hashCode 方法。</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180108/CKHe7EICGd.png-1" alt="mark"></p><p><strong>@NonNull</strong></p><p>注解在 <strong>属性</strong> 上，会自动产生一个关于此参数的非空检查，如果参数为空，则抛出一个空指针异常，也会有一个默认的无参构造方法。</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180108/g6Lh1eh1jm.png-1" alt="mark"></p><p><strong>@Cleanup</strong></p><p>这个注解用在 <strong>变量</strong> 前面，可以保证此变量代表的资源会被自动关闭，默认是调用资源的 close() 方法，如果该资源有其它关闭方法，可使用 @Cleanup(“methodName”) 来指定要调用的方法，也会生成默认的构造方法</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180108/Ba1bDkKb9J.png-1" alt="mark"></p><p><strong>@ToString</strong></p><p>这个注解用在 <strong>类</strong> 上，可以生成所有参数的 toString 方法，还会生成默认的构造方法。</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180108/7LjglDeH8e.png-1" alt="mark"></p><p><strong>@RequiredArgsConstructor</strong></p><p>这个注解用在 <strong>类</strong> 上，使用类中所有带有 @NonNull 注解的或者带有 final 修饰的成员变量生成对应的构造方法。</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180108/CBgAF4ei8m.png-1" alt="mark"></p><p><strong>@Value</strong></p><p>这个注解用在 <strong>类</strong> 上，会生成含所有参数的构造方法，get 方法，此外还提供了equals、hashCode、toString 方法。</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180108/b6KeAg0ABi.png-1" alt="mark"></p><p><strong>@SneakyThrows</strong></p><p>这个注解用在 <strong>方法</strong> 上，可以将方法中的代码用 try-catch 语句包裹起来，捕获异常并在 catch 中用 Lombok.sneakyThrow(e) 把异常抛出，可以使用 @SneakyThrows(Exception.class) 的形式指定抛出哪种异常，也会生成默认的构造方法。</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180108/IfCKh1FGbh.png-1" alt="mark"></p><p><strong>@Synchronized</strong></p><p>这个注解用在 <strong>类方法</strong> 或者 <strong>实例方法</strong> 上，效果和 synchronized 关键字相同，区别在于锁对象不同，对于类方法和实例方法，synchronized 关键字的锁对象分别是类的 class 对象和 this 对象，而 @Synchronized 的锁对象分别是 私有静态 final 对象 lock 和 私有 final 对象 lock，当然，也可以自己指定锁对象，此外也提供默认的构造方法。</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180108/L95jIc7eJi.png-1" alt="mark"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上注解可根据需要一起搭配使用！</p><p><strong>虽说轮子好，但是我们不仅要知其然，也要知其所以然！</strong></p><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180103/C6LG3mGa12.jpg" alt="mark"></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>转载请注明原创地址：<a href="http://www.54tianzhisheng.cn/2018/01/07/lombok/" target="_blank" rel="noopener">http://www.54tianzhisheng.cn/2018/01/07/lombok/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/blog/180107/7JfK07cCbh.png-1&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h3&gt;&lt;p&gt;自从进公司实习后，项目代码中能用 Lombok 的都用了，毕竟这么好的轮子要充分利用好。也可以减少一些 get/set/toString 方法的编写，虽说 IDEA 的插件可以自动生成 get/set/toString 方法，但是使用 Lombok 可以让代码更简洁。&lt;br&gt;
    
    </summary>
    
    
      <category term="lombok" scheme="http://yoursite.com/tags/lombok/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot Kafka 整合使用</title>
    <link href="http://yoursite.com/2018/01/05/SpringBoot-Kafka/"/>
    <id>http://yoursite.com/2018/01/05/SpringBoot-Kafka/</id>
    <published>2018-01-04T16:00:00.000Z</published>
    <updated>2018-01-21T11:25:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180105/DKcBEKHimB.jpg-1" alt="mark"></p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>假设你了解过 SpringBoot 和 Kafka。<br><a id="more"></a><br>1、SpringBoot</p><p>如果对 SpringBoot 不了解的话，建议去看看 <a href="http://blog.didispace.com/Spring-Boot%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/" target="_blank" rel="noopener">DD 大佬</a> 和 <a href="http://www.ityouknow.com/spring-boot.html" target="_blank" rel="noopener">纯洁的微笑</a> 的系列博客。</p><p>2、Kafka</p><p>Kafka 的话可以看看我前两天写的博客 ： <a href="http://www.54tianzhisheng.cn/2018/01/04/Kafka/" target="_blank" rel="noopener">Kafka 安装及快速入门</a>   学习的话自己开台虚拟机自己手动搭建环境吧，有条件的买服务器。</p><p>注意：<strong>一定要亲自自己安装实践</strong>，接下来我们将这两个进行整合。</p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><h4 id="项目整体架构："><a href="#项目整体架构：" class="headerlink" title="项目整体架构："></a>项目整体架构：</h4><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180105/c6jC85Bbk4.png-1" alt="mark"></p><p>使用 IDEA 创建 SpringBoot 项目，这个很简单了，这里不做过多的讲解。</p><p>1、pom 文件代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhisheng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka-learning<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>kafka-learning<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot + kafka<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主要引入了  spring-kafka 、lombok 、 gson 依赖。</p><p>2、消息实体类 Message.java  如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;    <span class="comment">//id</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg; <span class="comment">//消息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date sendTime;  <span class="comment">//时间戳</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、消息发送类 KafkaSender.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaSender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate&lt;String, String&gt; kafkaTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Gson gson = <span class="keyword">new</span> GsonBuilder().create();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送消息方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Message message = <span class="keyword">new</span> Message();</span><br><span class="line">        message.setId(System.currentTimeMillis());</span><br><span class="line">        message.setMsg(UUID.randomUUID().toString());</span><br><span class="line">        message.setSendTime(<span class="keyword">new</span> Date());</span><br><span class="line">        log.info(<span class="string">"+++++++++++++++++++++  message = &#123;&#125;"</span>, gson.toJson(message));</span><br><span class="line">        kafkaTemplate.send(<span class="string">"zhisheng"</span>, gson.toJson(message));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就这样，发送消息代码就实现了。</p><p>这里关键的代码为 <code>kafkaTemplate.send()</code>  方法，<code>zhisheng</code> 是 Kafka 里的 topic ，这个 topic 在 Java 程序中是不需要提前在 Kafka 中设置的，因为它会在发送的时候自动创建你设置的 topic， <code>gson.toJson(message)</code>   是消息内容，这里暂时先说这么多了，不详解了，后面有机会继续把里面源码解读写篇博客出来（因为中途碰到坑，老子跟了几遍源码）。</p><p>4、消息接收类  KafkaReceiver.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@KafkaListener</span>(topics = &#123;<span class="string">"zhisheng"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">(ConsumerRecord&lt;?, ?&gt; record)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Optional&lt;?&gt; kafkaMessage = Optional.ofNullable(record.value());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (kafkaMessage.isPresent()) &#123;</span><br><span class="line"></span><br><span class="line">            Object message = kafkaMessage.get();</span><br><span class="line"></span><br><span class="line">            log.info(<span class="string">"----------------- record ="</span> + record);</span><br><span class="line">            log.info(<span class="string">"------------------ message ="</span> + message);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端 consumer 接收消息特别简单，直接用 <code>@KafkaListener</code> 注解即可，并在监听中设置监听的 <code>topic</code> ，<code>topics</code> 是一个数组所以是可以绑定多个主题的，上面的代码中修改为 <code>@KafkaListener(topics = {&quot;zhisheng&quot;,&quot;tian&quot;})</code>  就可以同时监听两个 <code>topic</code> 的消息了。需要注意的是：这里的 topic 需要和消息发送类 KafkaSender.java 中设置的 topic 一致。</p><p>5、启动类 KafkaApplication.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ConfigurableApplicationContext context = SpringApplication.run(KafkaApplication.class, args);</span><br><span class="line"></span><br><span class="line">        KafkaSender sender = context.getBean(KafkaSender.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//调用消息发送类中的消息发送方法</span></span><br><span class="line">            sender.send();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、配置文件 application.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#============== kafka ===================</span><br><span class="line"># 指定kafka 代理地址，可以多个</span><br><span class="line">spring.kafka.bootstrap-servers=192.168.153.135:9092</span><br><span class="line"></span><br><span class="line">#=============== provider  =======================</span><br><span class="line"></span><br><span class="line">spring.kafka.producer.retries=0</span><br><span class="line"># 每次批量发送消息的数量</span><br><span class="line">spring.kafka.producer.batch-size=16384</span><br><span class="line">spring.kafka.producer.buffer-memory=33554432</span><br><span class="line"></span><br><span class="line"># 指定消息key和消息体的编解码方式</span><br><span class="line">spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer</span><br><span class="line">spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer</span><br><span class="line"></span><br><span class="line">#=============== consumer  =======================</span><br><span class="line"># 指定默认消费者group id</span><br><span class="line">spring.kafka.consumer.group-id=test-consumer-group</span><br><span class="line"></span><br><span class="line">spring.kafka.consumer.auto-offset-reset=earliest</span><br><span class="line">spring.kafka.consumer.enable-auto-commit=true</span><br><span class="line">spring.kafka.consumer.auto-commit-interval=100</span><br><span class="line"></span><br><span class="line"># 指定消息key和消息体的编解码方式</span><br><span class="line">spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer</span><br><span class="line">spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer</span><br></pre></td></tr></table></figure><p>spring.kafka.bootstrap-servers 后面设置你安装的 Kafka 的机器 IP 地址和端口号 9092。</p><p>如果你只是简单整合下，其他的几个默认就好了。</p><h3 id="Kafka-设置"><a href="#Kafka-设置" class="headerlink" title="Kafka 设置"></a>Kafka 设置</h3><p>在你安装的 Kafka 目录文件下：</p><h4 id="启动-zk"><a href="#启动-zk" class="headerlink" title="启动 zk"></a>启动 zk</h4><p>使用安装包中的脚本启动单节点 Zookeeper 实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/zookeeper-server-start.sh -daemon config/zookeeper.properties</span><br></pre></td></tr></table></figure><h4 id="启动-Kafka-服务"><a href="#启动-Kafka-服务" class="headerlink" title="启动 Kafka 服务"></a>启动 Kafka 服务</h4><p>使用 <code>kafka-server-start.sh</code> 启动 kafka 服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-server-start.sh  config/server.properties</span><br></pre></td></tr></table></figure><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180104/Lc2CiKfIee.png-1" alt="mark"></p><p>启动成功后！</p><p><strong>千万注意</strong>： 记得将你的虚拟机或者服务器关闭防火墙或者开启 Kafka 的端口 9092。</p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180105/HBB0LCDdj8.png-1" alt="mark"></p><p>出现这就代表整合成功了！</p><hr><p>我们看下 Kafka 中的 topic 列表就</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-topics.sh --list --zookeeper localhost:2181</span><br></pre></td></tr></table></figure><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180105/DI6cmll4BC.png-1" alt="mark"></p><p>就会发现刚才我们程序中的 <code>zhisheng</code> 已经自己创建了。</p><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180103/C6LG3mGa12.jpg" alt="mark"></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>转载请务必注明原创地址为：<a href="http://www.54tianzhisheng.cn/2018/01/05/SpringBoot-Kafka/" target="_blank" rel="noopener">http://www.54tianzhisheng.cn/2018/01/05/SpringBoot-Kafka/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/blog/180105/DKcBEKHimB.jpg-1&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h3&gt;&lt;p&gt;假设你了解过 SpringBoot 和 Kafka。&lt;br&gt;
    
    </summary>
    
    
      <category term="Kafka" scheme="http://yoursite.com/tags/Kafka/"/>
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>为什么要重新运营以前的公众号呢？</title>
    <link href="http://yoursite.com/2018/01/04/weixin/"/>
    <id>http://yoursite.com/2018/01/04/weixin/</id>
    <published>2018-01-03T16:00:00.000Z</published>
    <updated>2018-01-21T11:26:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180103/mL5G5acdd4.png-1" alt="mark"></p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>老读者可能会发现现在我的公众号已经改名了。（由 “猿blog”  变成  “zhisheng” 了，细心的童鞋会发现不仅名字变了， ID 也变了，但是图片还没改，暂时还没想到好的 logo 图片），下面说说为啥吧！<br><a id="more"></a></p><h3 id="听我瞎-BB"><a href="#听我瞎-BB" class="headerlink" title="听我瞎 BB"></a>听我瞎 BB</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180103/k1a984Emlc.png-1" alt="mark"></p><p>上图是两年前公众号群发的第一条信息，那时自己还是在学校，如今已经进入了社会，在公司实习了。记得当初开这个公众号的原因是因为几个年轻人有着梦想，打算一起做点东西，当时一腔热血的自己立马就先申请了个公众号，后来 “东西” 倒是没做，反倒是我自己慢慢的在微信公众号分享一些文章，然后那时自己也写博客（算算自己写博客应该快三年了，坚持真不易啊），所以偶尔也把自己的博客分享在微信公众号上。</p><p>但是好景不长，那时的微信公众号排版真尼玛难用的一批，作为一个理工科的男生，本来自己做事一般细心和耐心，无奈，把这么好的一个童鞋都给逼坏了。我现在还是得吐槽下，如今的微信公众号后台排版还是那么差。但是可能因为需求比较多了，所以就有人做出了工具（将 markdown 排版后在将整个样式复制粘贴到微信公众号后台），这样一篇排版还算不错的博客就出来了。</p><p>自己早就知道了这么个工具，以前看 DD 的博客的时候就发现了这个工具，但是很久没更新的微信公众号，自己也不怎么想再管理。</p><p>有人就要问了？那为啥现在又要开始跟新了呢？</p><p>我只想说：“贱人就是矫情！！！又想瞎折腾下。”，反正自己的博客也在不断的更新，偶尔顺带把文章同步到微信公众号其实也是可以的。在学校的时候时间比较多，那时真的是时间比较多，后悔没好好坚持运营下来。现在工作了，自己工作之外的时间较少，除了学习，偶尔写写博客，娱乐时间比较少，都是大学时宅的。</p><p>前段时间被人 “忽悠” 说继续更新公众号，那时刚好也快 2018 年了，自己也想给自己定几个目标，在元旦的那天，想想还是继续更新微信公众号吧，所以你也看得到最近我的更新了，可能最近的更新比较有规律，因为这些文章大部分是之前就已经写好了的，已经发过在我的博客里了。估计把这些文章更新完后，就不会每天都更新我自己的文章了。</p><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><p>说下微信公众号的定位吧：</p><p>1、我的技术博客应该都会同步在这里的。</p><p>2、分享自己平时的随笔文章。（比如这篇。。。）</p><p>3、除了技术文章，当然还有平时自己的 奇淫技巧 （包括但不限于写作方式、推荐好用的软件等）</p><p>4、分享自己觉得不错的文章（别人的，尽量征得同意，一定会备注原创地址的）</p><p>5、如果你也写博客，但是阅读量很小的话，可以考虑自荐。（注：文章我可能会审批，必须要觉得不错的文章）</p><p>6、分享一些学习视频和书籍</p><p>7、后期可能会搞工作内推</p><p>。。。</p><p>暂时只想到这些了</p><h3 id="问题来了"><a href="#问题来了" class="headerlink" title="问题来了"></a>问题来了</h3><p>因为工作了，所以时间少，运营这微信公众号可能需要花费我不少工作之外的时间。</p><p>如果可以的话，我希望能找到一个能帮我分担点的朋友。</p><p>注：<strong>无偿的，如果介意的话，下面就不用再看了。</strong></p><hr><p>说点简单的要求吧：</p><p>1、细心、耐心的 boy  or  girl 都行</p><p>2、起码要知道点编程方面的知识</p><p>3、能坚持下来</p><p>4、对新技术有敏感的嗅觉</p><p>5、最后一点就是你要有点时间了，希望不耽误你学习</p><p>再说下能给你带来的 <strong>好处</strong> 吧：</p><p>1、肯定能增加你的运营能力（再去互联网公司投运营岗位会有优势的）</p><p>2、本人一开始会亲自教授该怎么做，所以没经验的朋友不用担心</p><p>3、可以增加和大牛勾搭的机会，你们懂的。。</p><p>4、本人可以亲自传授经验（编程和生活点滴经验）</p><p><strong>如果你有意愿的话，请加我 QQ ： 1041218129  聊聊吧</strong></p><hr><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180103/C6LG3mGa12.jpg" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/blog/180103/mL5G5acdd4.png-1&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h3&gt;&lt;p&gt;老读者可能会发现现在我的公众号已经改名了。（由 “猿blog”  变成  “zhisheng” 了，细心的童鞋会发现不仅名字变了， ID 也变了，但是图片还没改，暂时还没想到好的 logo 图片），下面说说为啥吧！&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Kafka 安装及快速入门</title>
    <link href="http://yoursite.com/2018/01/04/Kafka/"/>
    <id>http://yoursite.com/2018/01/04/Kafka/</id>
    <published>2018-01-03T16:00:00.000Z</published>
    <updated>2018-01-21T11:38:16.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180104/2K14BekelF.jpg-1" alt="mark"></p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>官网：<a href="http://kafka.apache.org/" target="_blank" rel="noopener">http://kafka.apache.org/</a></p><p>Apache Kafka是分布式发布-订阅消息系统。它最初由LinkedIn公司开发，之后成为Apache项目的一部分。Kafka是一种快速、可扩展的、设计内在就是分布式的，分区的和可复制的提交日志服务。<br><a id="more"></a><br>Apache Kafka与传统消息系统相比，有以下不同：</p><ul><li><p>它被设计为一个分布式系统，易于向外扩展；</p></li><li><p>它同时为发布和订阅提供高吞吐量；</p></li><li><p>它支持多订阅者，当失败时能自动平衡消费者；</p></li><li><p>它将消息持久化到磁盘，因此可用于批量消费，例如ETL，以及实时应用程序。</p></li></ul><h3 id="安装-kafka"><a href="#安装-kafka" class="headerlink" title="安装 kafka"></a>安装 kafka</h3><p>下载地址：<a href="https://kafka.apache.org/downloads" target="_blank" rel="noopener">https://kafka.apache.org/downloads</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://mirrors.shuosc.org/apache/kafka/1.0.0/kafka_2.11-1.0.0.tgz</span><br></pre></td></tr></table></figure><p>解压：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf kafka_2.11-1.0.0.tgz</span><br><span class="line"></span><br><span class="line">cd /usr/local/kafka_2.11-1.0.0/</span><br></pre></td></tr></table></figure></p><p>修改 kafka-server 的配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/kafka/config/server.properties</span><br></pre></td></tr></table></figure><p>修改其中的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">broker.id=1</span><br><span class="line">log.dir=/data/kafka/logs-1</span><br></pre></td></tr></table></figure><h3 id="功能验证："><a href="#功能验证：" class="headerlink" title="功能验证："></a>功能验证：</h3><h4 id="1、启动-zk"><a href="#1、启动-zk" class="headerlink" title="1、启动 zk"></a>1、启动 zk</h4><p>使用安装包中的脚本启动单节点 Zookeeper 实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/zookeeper-server-start.sh -daemon config/zookeeper.properties</span><br></pre></td></tr></table></figure><h4 id="2、启动Kafka-服务"><a href="#2、启动Kafka-服务" class="headerlink" title="2、启动Kafka 服务"></a>2、启动Kafka 服务</h4><p>使用 <code>kafka-server-start.sh</code> 启动 kafka 服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-server-start.sh  config/server.properties</span><br></pre></td></tr></table></figure><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180104/Lc2CiKfIee.png-1" alt="mark"></p><h4 id="3、创建-topic"><a href="#3、创建-topic" class="headerlink" title="3、创建 topic"></a>3、创建 topic</h4><p>使用 <code>kafka-topics.sh</code> 创建单分区单副本的 topic test：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test</span><br></pre></td></tr></table></figure><p>查看 topic 列表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-topics.sh --list --zookeeper localhost:2181</span><br></pre></td></tr></table></figure><p>查询创建的 topic 列表报错：</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180104/c3K5D805eI.png-1" alt="mark"></p><p>解决方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure><p>将 host 里的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         ip6-localhost ip6-localhost.localdomain localhost6 localhost6.localdomain6</span><br></pre></td></tr></table></figure><p>方法参考：<a href="https://stackoverflow.com/questions/28109669/zookeeper-unable-to-open-socket-to-localhost-000000012181" target="_blank" rel="noopener">zookeeper unable to open socket to localhost/0:0:0:0:0:0:0:1:2181</a></p><p>再次查询就不报错了。</p><h4 id="4、产生消息"><a href="#4、产生消息" class="headerlink" title="4、产生消息"></a>4、产生消息</h4><p>使用 <code>kafka-console-producer.sh</code> 发送消息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test</span><br></pre></td></tr></table></figure><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180104/4F1EAgdmI1.png-1" alt="mark"></p><h4 id="5、消费消息"><a href="#5、消费消息" class="headerlink" title="5、消费消息"></a>5、消费消息</h4><p>使用 <code>kafka-console-consumer.sh</code> 接收消息并在终端打印：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic test --from-beginning</span><br></pre></td></tr></table></figure><p>打开个新的命令窗口执行上面命令即可查看信息：</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180104/c8mg8jJFki.png-1" alt="mark"></p><h4 id="6、查看描述-topics-信息"><a href="#6、查看描述-topics-信息" class="headerlink" title="6、查看描述 topics 信息"></a>6、查看描述 topics 信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-topics.sh --describe --zookeeper localhost:2181 --topic test</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Topic:testPartitionCount:1ReplicationFactor:1Configs:</span><br><span class="line">Topic: testPartition: 0Leader: 1Replicas: 1Isr: 1</span><br></pre></td></tr></table></figure><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180104/6JlmHdLcI5.png-1" alt="mark"></p><p>第一行给出了所有分区的摘要，每个附加行给出了关于一个分区的信息。 由于我们只有一个分区，所以只有一行。</p><p>“Leader”: 是负责给定分区的所有读取和写入的节点。 每个节点将成为分区随机选择部分的领导者。</p><p>“Replicas”: 是复制此分区日志的节点列表，无论它们是否是领导者，或者即使他们当前处于活动状态。</p><p>“Isr”: 是一组“同步”副本。这是复制品列表的子集，当前活着并被引导到领导者。</p><h3 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h3><p>Kafka 支持两种模式的集群搭建：可以在单机上运行多个 broker 实例来实现集群，也可在多台机器上搭建集群，下面介绍下如何实现单机多 broker 实例集群，其实很简单，只需要如下配置即可。</p><h4 id="单机多broker-集群配置"><a href="#单机多broker-集群配置" class="headerlink" title="单机多broker 集群配置"></a>单机多broker 集群配置</h4><p>利用单节点部署多个 broker。 不同的 broker 设置不同的 id，监听端口及日志目录。 例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cp config/server.properties config/server-2.properties</span><br><span class="line"></span><br><span class="line">cp config/server.properties config/server-3.properties</span><br><span class="line"></span><br><span class="line">vim config/server-2.properties</span><br><span class="line"></span><br><span class="line">vim config/server-3.properties</span><br></pre></td></tr></table></figure><p>修改 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">broker.id=2</span><br><span class="line"></span><br><span class="line">listeners = PLAINTEXT://your.host.name:9093</span><br><span class="line"></span><br><span class="line">log.dir=/data/kafka/logs-2</span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">broker.id=3</span><br><span class="line"></span><br><span class="line">listeners = PLAINTEXT://your.host.name:9094</span><br><span class="line"></span><br><span class="line">log.dir=/data/kafka/logs-3</span><br></pre></td></tr></table></figure><p>启动Kafka服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-server-start.sh config/server-2.properties &amp;</span><br><span class="line"></span><br><span class="line">bin/kafka-server-start.sh config/server-3.properties &amp;</span><br></pre></td></tr></table></figure><p>至此，单机多broker实例的集群配置完毕。</p><h4 id="多机多-broker-集群配置"><a href="#多机多-broker-集群配置" class="headerlink" title="多机多 broker 集群配置"></a>多机多 broker 集群配置</h4><p>分别在多个节点按上述方式安装 Kafka，配置启动多个 Zookeeper 实例。</p><p>假设三台机器 IP 地址是 ： 192.168.153.135， 192.168.153.136， 192.168.153.137</p><p>分别配置多个机器上的 Kafka 服务，设置不同的 broker id，zookeeper.connect 设置如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim config/server.properties</span><br></pre></td></tr></table></figure><p>里面的 <code>zookeeper.connect</code></p><p>修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zookeeper.connect=192.168.153.135:2181,192.168.153.136:2181,192.168.153.137:2181</span><br></pre></td></tr></table></figure><h3 id="使用-Kafka-Connect-来导入-导出数据"><a href="#使用-Kafka-Connect-来导入-导出数据" class="headerlink" title="使用 Kafka Connect 来导入/导出数据"></a>使用 Kafka Connect 来导入/导出数据</h3><p>从控制台写入数据并将其写回控制台是一个方便的起点，但您可能想要使用其他来源的数据或将数据从 Kafka 导出到其他系统。对于许多系统，您可以使用 Kafka Connect 来导入或导出数据，而不必编写自定义集成代码。</p><p>Kafka Connect 是 Kafka 包含的一个工具，可以将数据导入和导出到 Kafka。它是一个可扩展的工具，运行 连接器，实现与外部系统交互的自定义逻辑。在这个快速入门中，我们将看到如何使用简单的连接器运行 Kafka Connect，这些连接器将数据从文件导入到 Kafka topic，并将数据从 Kafka topic 导出到文件。</p><p>首先，我们将通过创建一些种子数据开始测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo -e &quot;zhisheng\ntian&quot; &gt; test.txt</span><br></pre></td></tr></table></figure><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180104/79EG4ilBAH.png-1" alt="mark"></p><p>接下来，我们将启动两个以独立模式运行的连接器，这意味着它们将在单个本地专用进程中运行。我们提供三个配置文件作为参数。首先是 Kafka Connect 过程的配置，包含常见的配置，例如要连接的 Kafka 代理以及数据的序列化格式。其余的配置文件都指定一个要创建的连接器。这些文件包括唯一的连接器名称，要实例化的连接器类以及连接器所需的任何其他配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/connect-standalone.sh  config/connect-standalone.properties config/connect-file-source.properties config/connect-file-sink.properties</span><br></pre></td></tr></table></figure><p>Kafka 附带的这些示例配置文件使用您之前启动的默认本地群集配置，并创建两个连接器：第一个是源连接器，用于读取输入文件中的行，并将每个连接生成为 Kafka topic，第二个为连接器它从 Kafka topic 读取消息，并在输出文件中产生每行消息。</p><p>在启动过程中，您会看到一些日志消息，其中一些指示连接器正在实例化。Kafka Connect 进程启动后，源连接器应该开始读取 test.txt topic connect-test，并将其生成 topic ，并且接收器连接器应该开始读取 topic 中的消息 connect-test 并将其写入文件 test.sink.txt。我们可以通过检查输出文件的内容来验证通过整个管道传输的数据：</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180104/Jh18BCJcb6.png-1" alt="mark"></p><p>数据存储在 Kafka topic 中 connect-test，因此我们也可以运行控制台使用者来查看 topic 中的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic connect-test --from-beginning</span><br></pre></td></tr></table></figure><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180104/LBC5fF1LK6.png-1" alt="mark"></p><p>连接器继续处理数据，所以我们可以将数据添加到文件中，并看到它在管道中移动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo zhishengtian&gt;&gt; test.txt</span><br><span class="line">echo zhishengtian2&gt;&gt; test.txt</span><br><span class="line">echo zhishengtian3&gt;&gt; test.txt</span><br><span class="line">echo zhishengtian4&gt;&gt; test.txt</span><br></pre></td></tr></table></figure><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180104/0DH6K1dkBA.png-1" alt="mark"></p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180104/6JLE96B87K.png-1" alt="mark"></p><h3 id="使用-Kafka-流来处理数据"><a href="#使用-Kafka-流来处理数据" class="headerlink" title="使用 Kafka 流来处理数据"></a>使用 Kafka 流来处理数据</h3><p>Kafka Streams 是用于构建关键任务实时应用程序和微服务的客户端库，输入和/或输出数据存储在 Kafka 集群中。Kafka Streams 结合了在客户端编写和部署标准 Java 和 Scala 应用程序的简单性以及 Kafka 服务器端集群技术的优势，使这些应用程序具有高度可伸缩性，弹性，容错性，分布式等特性。</p><p>可参考官网入门案例：<a href="http://kafka.apache.org/10/documentation/streams/quickstart" target="_blank" rel="noopener">http://kafka.apache.org/10/documentation/streams/quickstart</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>1、<a href="https://www.mtyun.com/library/how-to-install-kafka-on-centos7" target="_blank" rel="noopener">在CentOS 7上安装Kafka</a></p><p>2、<a href="http://kafka.apache.org/10/documentation/streams/quickstart" target="_blank" rel="noopener">http://kafka.apache.org/10/documentation/streams/quickstart</a></p><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180103/C6LG3mGa12.jpg" alt="mark"></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>转载请注明原创地址为：<a href="http://www.54tianzhisheng.cn/2018/01/04/Kafka/" target="_blank" rel="noopener">http://www.54tianzhisheng.cn/2018/01/04/Kafka/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/blog/180104/2K14BekelF.jpg-1&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;官网：&lt;a href=&quot;http://kafka.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://kafka.apache.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Apache Kafka是分布式发布-订阅消息系统。它最初由LinkedIn公司开发，之后成为Apache项目的一部分。Kafka是一种快速、可扩展的、设计内在就是分布式的，分区的和可复制的提交日志服务。&lt;br&gt;
    
    </summary>
    
    
      <category term="Kafka" scheme="http://yoursite.com/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Windows 下安装 Consul</title>
    <link href="http://yoursite.com/2017/12/27/consul-install/"/>
    <id>http://yoursite.com/2017/12/27/consul-install/</id>
    <published>2017-12-26T16:00:00.000Z</published>
    <updated>2018-01-21T11:06:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171227/Da4dGccaEd.jpg-1" alt="mark"></p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>从刚工作就开始接触 Consul，中途自己也有两个项目和 Consul 有关，后面有机会再讲讲，网上关于这个的资料还比较少。因为明天有 Consul 的技术分享，所以自己今天下午在官网看了下相关的介绍。<br><a id="more"></a></p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Consul 是一个支持多数据中心分布式高可用的服务发现和配置共享的服务软件,  由 HashiCorp 公司用 Go 语言开发,  基于 Mozilla Public License 2.0 的协议进行开源。Consul 支持健康检查,  并允许 HTTP 和 DNS 协议调用 API 存储键值对。<br>命令行超级好用的虚拟机管理软件 vgrant 也是 HashiCorp 公司开发的产品。一致性协议采用 Raft 算法,  用来保证服务的高可用， 使用 GOSSIP 协议管理成员和广播消息, 并且支持 ACL 访问控制。</p><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p>去官网下载：<a href="https://www.consul.io/downloads.html" target="_blank" rel="noopener">https://www.consul.io/downloads.html</a></p><p>得到一个 zip 压缩包</p><p>在你想要安装的位置解压就行，只有一个 consul.exe 文件（我的解压位置是：D:\software）</p><p>设置环境变量（在 path 中新增一条）：</p><p>D:\software</p><p>cmd 命令窗口启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">consul agent -dev</span><br></pre></td></tr></table></figure><p>consul 自带 UI 界面，打开网址：<a href="http://localhost:8500" target="_blank" rel="noopener">http://localhost:8500</a> ，可以看到当前注册的服务界面。</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171227/7Alcc9AECH.png-1" alt="mark"></p><h3 id="Consul-优势"><a href="#Consul-优势" class="headerlink" title="Consul 优势"></a>Consul 优势</h3><ul><li>使用 Raft 算法来保证一致性, 比复杂的 Paxos 算法更直接. 相比较而言, zookeeper 采用的是 Paxos, 而 etcd 使用的则是 Raft.</li><li>支持多数据中心，内外网的服务采用不同的端口进行监听。 多数据中心集群可以避免单数据中心的单点故障,而其部署则需要考虑网络延迟, 分片等情况等. zookeeper 和 etcd 均不提供多数据中心功能的支持.</li><li>支持健康检查. etcd 不提供此功能.</li><li>支持 http 和 dns 协议接口. zookeeper 的集成较为复杂, etcd 只支持 http 协议.</li><li>官方提供web管理界面, etcd 无此功能.</li></ul><p>综合比较, Consul 作为服务注册和配置管理的新星, 比较值得关注和研究.</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><blockquote><p>本文首发于：<a href="http://www.54tianzhisheng.cn/" target="_blank" rel="noopener">zhisheng的博客</a></p><p>地址为：<a href="http://www.54tianzhisheng.cn/2017/12/27/consul-install/" target="_blank" rel="noopener">http://www.54tianzhisheng.cn/2017/12/27/consul-install/</a>    转载请注明地址！</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/blog/171227/Da4dGccaEd.jpg-1&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h3&gt;&lt;p&gt;从刚工作就开始接触 Consul，中途自己也有两个项目和 Consul 有关，后面有机会再讲讲，网上关于这个的资料还比较少。因为明天有 Consul 的技术分享，所以自己今天下午在官网看了下相关的介绍。&lt;br&gt;
    
    </summary>
    
    
      <category term="Consul" scheme="http://yoursite.com/tags/Consul/"/>
    
  </entry>
  
  <entry>
    <title>ELK 实时日志分析平台环境搭建</title>
    <link href="http://yoursite.com/2017/12/25/ELK/"/>
    <id>http://yoursite.com/2017/12/25/ELK/</id>
    <published>2017-12-24T16:00:00.000Z</published>
    <updated>2018-01-21T11:10:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171225/82lhH8E4Hk.jpg-1" alt="mark"></p><h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><p>ELK（ElasticSearch, Logstash, Kibana），三者组合在一起搭建实时的日志分析平台，目前好多公司都是这套！<br><a id="more"></a></p><ul><li>Elasticsearch 是个开源分布式搜索引擎，它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful 风格接口，多数据源，自动搜索负载等。</li><li>Logstash 是一个完全开源的工具，他可以对你的日志进行收集、过滤，并将其存储供以后使用（如，搜索）。</li><li>Kibana 也是一个开源和免费的工具，它 Kibana 可以为 Logstash 和 ElasticSearch 提供的日志分析友好的 Web 界面，可以帮助您汇总、分析和搜索重要数据日志。</li></ul><h3 id="安装-ES"><a href="#安装-ES" class="headerlink" title="安装 ES"></a>安装 ES</h3><p>。。。这个省略，不 bb 了，以前写过。。。传送门：<a href="http://www.54tianzhisheng.cn/2017/09/09/Elasticsearch-install/" target="_blank" rel="noopener">http://www.54tianzhisheng.cn/2017/09/09/Elasticsearch-install/</a></p><h3 id="安装-Logstash"><a href="#安装-Logstash" class="headerlink" title="安装 Logstash"></a>安装 Logstash</h3><p>ELK 整套环境搭建版本很关键，最好全统一一个版本，否则出啥问题就不太好找了。这是我见过版本统一最严格的了。而已 ES 版本升了后，其他的都要都要升级，包括其插件。升级代价挺大的，最好一开始就定位好要安装哪个版本！</p><p>在官网下好安装包后传到 Linux 上，这是速度最快的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">在 /usr/local 目录下解压：</span><br><span class="line"></span><br><span class="line">tar -zxvf  logstash-5.5.2.tar.gz</span><br><span class="line"></span><br><span class="line">进入解压后的目录：</span><br><span class="line"></span><br><span class="line">cd /usr/local/logstash-5.5.2/bin</span><br><span class="line"></span><br><span class="line">新增配置文件：</span><br><span class="line"></span><br><span class="line">vim logstash.conf</span><br><span class="line"></span><br><span class="line">增加：</span><br><span class="line"></span><br><span class="line">input&#123;</span><br><span class="line">    file&#123;</span><br><span class="line">      path =&gt; [&quot;/var/log/*.log&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output&#123;</span><br><span class="line">   elasticsearch&#123;</span><br><span class="line">       hosts =&gt; [&quot;192.168.153.135:9200&quot;]</span><br><span class="line">       index =&gt; &quot;logstash__log&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Logstash 的启动方式是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在 /usr/local/logstash-5.5.2/bin 目录下运行：</span><br><span class="line"></span><br><span class="line">./logstash -f logstash.conf</span><br></pre></td></tr></table></figure><h3 id="安装-Kibana"><a href="#安装-Kibana" class="headerlink" title="安装 Kibana"></a>安装 Kibana</h3><p>同样，官网下好安装包，上传到 Linux。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">解压：</span><br><span class="line"></span><br><span class="line">tar -zxvf kibana-5.5.2-linux-x86_64.tar.gz</span><br><span class="line"></span><br><span class="line">修改配置文件 kibana-5.5.2/config/kibana.yml 如下：</span><br><span class="line"></span><br><span class="line">Server.host  //配置机器ip/hostname</span><br><span class="line"></span><br><span class="line">Server.name  //此kibana服务的名称</span><br><span class="line"></span><br><span class="line">elasticsearch.url  //es master节点url</span><br></pre></td></tr></table></figure><p>Kibana 启动方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在 /usr/local/kibana-5.5.2/bin 目录下运行：</span><br><span class="line"></span><br><span class="line">./kibana</span><br></pre></td></tr></table></figure><p>Web界面访问: <a href="http://ip:5601" target="_blank" rel="noopener">http://ip:5601</a> 此时需要输入用户名和密码登录,默认分别是 elastic 和 changeme</p><h3 id="X-Pack"><a href="#X-Pack" class="headerlink" title="X-Pack"></a>X-Pack</h3><p>X-Pack 是一个 Elastic Stack 的扩展，将安全，警报，监控，报告和图形功能包含在一个易于安装的软件包中。</p><p>ES 和 Kibana 都可安装。</p><p>插件 x-pack-5.5.2.zip  依旧官网下。</p><h4 id="ES-安装-X-Pack"><a href="#ES-安装-X-Pack" class="headerlink" title="ES 安装 X-Pack"></a>ES 安装 X-Pack</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/elasticsearch/bin</span><br><span class="line"></span><br><span class="line">./elasticsearch-plugin install file:///opt/es/x-pack-5.5.2.zip</span><br></pre></td></tr></table></figure><p>如果成功：显示如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 bin]# ./elasticsearch-plugin install file:///opt/es/x-pack-5.5.2.zip</span><br><span class="line">-&gt; Downloading file:///opt/es/x-pack-5.5.2.zip</span><br><span class="line">[=================================================] 100%</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">@     WARNING: plugin requires additional permissions     @</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">* java.io.FilePermission \\.\pipe\* read,write</span><br><span class="line">* java.lang.RuntimePermission accessClassInPackage.com.sun.activation.registries</span><br><span class="line">* java.lang.RuntimePermission getClassLoader</span><br><span class="line">* java.lang.RuntimePermission setContextClassLoader</span><br><span class="line">* java.lang.RuntimePermission setFactory</span><br><span class="line">* java.security.SecurityPermission createPolicy.JavaPolicy</span><br><span class="line">* java.security.SecurityPermission getPolicy</span><br><span class="line">* java.security.SecurityPermission putProviderProperty.BC</span><br><span class="line">* java.security.SecurityPermission setPolicy</span><br><span class="line">* java.util.PropertyPermission * read,write</span><br><span class="line">* java.util.PropertyPermission sun.nio.ch.bugLevel write</span><br><span class="line">* javax.net.ssl.SSLPermission setHostnameVerifier</span><br><span class="line">See http://docs.oracle.com/javase/8/docs/technotes/guides/security/permissions.html</span><br><span class="line">for descriptions of what these permissions allow and the associated risks.</span><br><span class="line"></span><br><span class="line">Continue with installation? [y/N]y</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">@        WARNING: plugin forks a native controller        @</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">This plugin launches a native controller that is not subject to the Java</span><br><span class="line">security manager nor to system call filters.</span><br><span class="line"></span><br><span class="line">Continue with installation? [y/N]y</span><br><span class="line">-&gt; Installed x-pack</span><br></pre></td></tr></table></figure><h4 id="Kibana-安装-X-Pack"><a href="#Kibana-安装-X-Pack" class="headerlink" title="Kibana 安装 X-Pack"></a>Kibana 安装 X-Pack</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/kibana-5.5.2/bin</span><br><span class="line"></span><br><span class="line">./kibana-plugin install file:///opt/es/x-pack-5.5.2.zip</span><br></pre></td></tr></table></figure><p>安装成功如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 bin]# ./kibana-plugin install file:///opt/es/x-pack-5.5.2.zip</span><br><span class="line">Attempting to transfer from file:///opt/es/x-pack-5.5.2.zip</span><br><span class="line">Transferring 159867054 bytes....................</span><br><span class="line">Transfer complete</span><br><span class="line">Retrieving metadata from plugin archive</span><br><span class="line">Extracting plugin archive</span><br><span class="line">Extraction complete</span><br><span class="line">Optimizing and caching browser bundles...</span><br><span class="line">Plugin installation complete</span><br></pre></td></tr></table></figure><h4 id="启用-x-pack-安全机制"><a href="#启用-x-pack-安全机制" class="headerlink" title="启用 x-pack 安全机制"></a>启用 x-pack 安全机制</h4><p>分别在 kibana.yml 和 elasticsearch.yml 中加入下行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xpack.security.enabled: true</span><br></pre></td></tr></table></figure><p>这样后，你再打开 ES 的 head 界面和 Kibana 管理界面就需要输入账号密码了。</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171225/i8ebl0jgLl.png-1" alt="mark"></p><p>上图右边是安装 X-Pack 后的，功能多了几个。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>环境搭建很简单，后面如果有时间的话可以再讲讲在 Kibana 的 Dev Tools 上构建 ES 的 JSON 串来对 ES 进行操作。</p><p>我还写过 ES 相关的文章：</p><p>1、<a href="http://www.54tianzhisheng.cn/2017/09/07/Elasticsearch-analyzers/" target="_blank" rel="noopener">Elasticsearch 默认分词器和中分分词器之间的比较及使用方法</a></p><p>2、<a href="http://www.54tianzhisheng.cn/2017/09/09/Elasticsearch-install/" target="_blank" rel="noopener">全文搜索引擎 Elasticsearch 集群搭建入门教程</a></p><p>3、<a href="http://www.54tianzhisheng.cn/2017/10/15/ElasticSearch-cluster-health-metrics/" target="_blank" rel="noopener">ElasticSearch 集群监控</a></p><p>4、<a href="http://www.54tianzhisheng.cn/2017/10/18/ElasticSearch-nodes-metrics/" target="_blank" rel="noopener">ElasticSearch 单个节点监控</a></p><h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><blockquote><p>本文首发于：<a href="http://www.54tianzhisheng.cn/" target="_blank" rel="noopener">zhisheng 的博客</a></p><p>转载请注明地址：<a href="http://www.54tianzhisheng.cn/2017/12/25/ELK/" target="_blank" rel="noopener">http://www.54tianzhisheng.cn/2017/12/25/ELK/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/blog/171225/82lhH8E4Hk.jpg-1&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;简单介绍&quot;&gt;&lt;a href=&quot;#简单介绍&quot; class=&quot;headerlink&quot; title=&quot;简单介绍&quot;&gt;&lt;/a&gt;简单介绍&lt;/h3&gt;&lt;p&gt;ELK（ElasticSearch, Logstash, Kibana），三者组合在一起搭建实时的日志分析平台，目前好多公司都是这套！&lt;br&gt;
    
    </summary>
    
    
      <category term="ElasticSearch" scheme="http://yoursite.com/tags/ElasticSearch/"/>
    
      <category term="LogStash" scheme="http://yoursite.com/tags/LogStash/"/>
    
      <category term="Kibana" scheme="http://yoursite.com/tags/Kibana/"/>
    
  </entry>
  
  <entry>
    <title>Hexo + yilia 搭建博客可能会遇到的所有疑问</title>
    <link href="http://yoursite.com/2017/12/18/hexo-yilia/"/>
    <id>http://yoursite.com/2017/12/18/hexo-yilia/</id>
    <published>2017-12-17T16:00:00.000Z</published>
    <updated>2018-01-21T11:14:29.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171218/BaE3G1imDm.png-1" alt="mark"></p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>为什么会再次写这篇博客？请看下图：<br><a id="more"></a></p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171218/b4j29CkGgJ.png-1" alt="mark"></p><p>这是我博客搜索引擎的主要关键字。为什么会有这些关键字呢？</p><p>我猜估计是曾经写了几篇关于搭建博客的文章，被搜索引擎收入了，所以搜索引擎才会将这些流量引导至我的博客，文章如下：</p><p>1、<a href="http://www.54tianzhisheng.cn/2017/03/28/%E5%88%A9%E7%94%A8Github%20Page%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/" target="_blank" rel="noopener">利用Github Page 搭建个人博客网站</a></p><p>2、<a href="http://www.54tianzhisheng.cn/2017/06/13/Hexo-yilia-toc/" target="_blank" rel="noopener">Hexo + yilia 主题实现文章目录</a></p><p>3、<a href="http://www.54tianzhisheng.cn/2017/04/13/Hexo-yilia-changyan/" target="_blank" rel="noopener">Github pages + Hexo 博客 yilia 主题使用畅言评论系统</a></p><p>那还有这么多人搜索这些关键字？说明碰到问题的还有不少，所以才有了这篇文章的诞生！</p><h3 id="问题解答"><a href="#问题解答" class="headerlink" title="问题解答"></a>问题解答</h3><p><strong>1、hexo  yilia 文章目录</strong></p><p>这个我以前写过一篇文章：<a href="http://www.54tianzhisheng.cn/2017/06/13/Hexo-yilia-toc/" target="_blank" rel="noopener">Hexo + yilia 主题实现文章目录</a>    那篇文章写了我那个版本的 yilia 怎么添加文章目录的，但是好像新版本的 yilia 已经自带了这个文章目录功能。所以如果你是使用的新版本的 yilia ，请不要做任何修改！但是前几天有人给我发了个图片，又好像有点区别，如果实在有不同的话，请加群 528776268 找我要我那个主题版本的所有配置文件。再次说明，我前端也不是很擅长，我写那篇文章也是参考其他博客的修改，所以无能为力了。有什么问题，建议直接在 yilia 主题的 GitHub 去找作者聊！</p><p><strong>2、Hexo  yilia  随笔</strong></p><p>随笔如下：</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171218/0kkIFEkcja.png-1" alt="mark"></p><p>对此想说的就是，“随笔”  其实就是文章的一个 tags(标签)，如果你想把文章作为随笔的话，请在文章的首部写个 tags  为 “随笔”   的标签。如下图：</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171218/13539aGJF5.png-1" alt="mark"></p><p>注意：-  后面有个空格。</p><p><strong>3、yilia 主题分类实现</strong></p><p>如果要有多个标签，可以如下图所示：</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171218/lF42EedCJA.png-1" alt="mark"></p><p><strong>4、hexo yilia 设置文章显示长度，不展开全文</strong></p><p>yilia 主题中可以用 <code>&lt;!-- more --&gt;</code>  截取文章的显示长度，如果你想在哪截取文章，就在那行使用该字符。</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171218/2ickeEEFbh.png-1" alt="mark"></p><p><strong>5、yilia 添加阅读量</strong></p><p>我添加的是 “不蒜子” 计数，它可以区分 pv/uv 的统计方式，统计更精准，满足更多需求。有这个需求的可以去查找下博客怎么添加。（网上有很多这方面的博客）</p><p><strong>6、yilia 主题使用 “畅言” 评论系统</strong></p><p>参见我以前的文章：  <a href="http://www.54tianzhisheng.cn/2017/04/13/Hexo-yilia-changyan/" target="_blank" rel="noopener">Github pages + Hexo 博客 yilia 主题使用畅言评论系统</a></p><p><strong>7、hexo yilia 引入音乐</strong></p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171218/fA367Gej62.png-1" alt="mark"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">330</span> <span class="attr">height</span>=<span class="string">86</span> <span class="attr">src</span>=<span class="string">"填写音乐链接地址"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如下图，可以在网易云音乐里搜到你想要引入的音乐，然后点击如下的 “生成外链播放器” 即可：</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171218/lLLLBlH1FK.png-1" alt="mark"></p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171218/ibaCjDEhEa.png-1" alt="mark"></p><p><strong>8、hexo yilia 引入视频</strong></p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171218/1f6gC2mJ1f.png-1" alt="mark"></p><p>hexo  支持 html 语法的，所以可以如上图这样引入视频！</p><p><strong>9、hexo  yilia  相册</strong></p><p>这个抱歉，我自己也没做这方面的功能，暂时不太清楚怎么实现。不过有文章写怎么实现，大家可以搜索下！</p><p><strong>10、hexo  yilia  怎么写文章</strong></p><p>我一般写文章就是先用本地 markdown 编辑器写好后，然后放在 hexo 的 <code>source/_posts</code> 目录下。</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171218/0HjLacBcfe.png-1" alt="mark"></p><h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><p>好了，大概就这些问题，我也一一解答了，希望搭建博客的你可以看到这篇文章，让你少走点弯路，如果你也遇到过这些问题，还请你能分享下文章，让更多人避免入坑！</p><p>本文地址是：<a href="http://www.54tianzhisheng.cn/2017/12/18/hexo-yilia" target="_blank" rel="noopener">Hexo + yilia 搭建博客可能会遇到的所有疑问</a>  本文原创，转载请注明原创地址。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p><a href="http://www.54tianzhisheng.cn/2017/12/18/hexo-yilia" target="_blank" rel="noopener">http://www.54tianzhisheng.cn/2017/12/18/hexo-yilia</a>  这个链接是让推酷爬虫吞掉的，哈哈！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/blog/171218/BaE3G1imDm.png-1&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h3&gt;&lt;p&gt;为什么会再次写这篇博客？请看下图：&lt;br&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="yilia" scheme="http://yoursite.com/tags/yilia/"/>
    
  </entry>
  
  <entry>
    <title>谷歌开发者大会收获满满，不去真 “可惜” 了</title>
    <link href="http://yoursite.com/2017/12/13/Google-Developer-Days/"/>
    <id>http://yoursite.com/2017/12/13/Google-Developer-Days/</id>
    <published>2017-12-12T16:00:00.000Z</published>
    <updated>2018-01-21T11:11:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/1DJAFA7Kmb.png-1" alt="mark"><br>全文图片较多，请在 WiFi 下阅读，土豪请随意！<br><a id="more"></a></p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>今年 Google 开发者大会再度来袭，大会将于 12 月 13 日和 14 日在上海举办，主题涵盖机器学习(Machine Learning)、Android、移动网络(Mobile Web)、TensorFlow、Firebase、云服务(Cloud)、AR/VR、设计(Design)以及更多开发者相关内容。</p><p>今天我就到走一遭，收获满满，都是用袋子提回来的，哈哈。下图为袋子：</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/LB2im47IbD.png-1" alt="mark"></p><p>再秀张图代表我去了：</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/ia81GicG37.png-1" alt="mark"></p><h3 id="入场"><a href="#入场" class="headerlink" title="入场"></a>入场</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/1DJAFA7Kmb.png-1" alt="mark"></p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/5KAJDGGGH5.png-1" alt="mark"></p><p>说下今天我参加的会场吧！</p><h3 id="会场"><a href="#会场" class="headerlink" title="会场"></a>会场</h3><h4 id="主会场开幕"><a href="#主会场开幕" class="headerlink" title="主会场开幕"></a>主会场开幕</h4><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/iKjbLIggh8.png-1" alt="mark"></p><p>当然是用来用来做开发者开幕大会主题演讲的。相信不少没到现场的也看了直播。</p><p>拍了两张李飞飞演讲时的照片：</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/BggGaADkF7.png-1" alt="mark"></p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/KEAB816319.png-1" alt="mark"></p><p>还有个妹子是讲 TensorFlow 的，全程中文，还贼 6，佩服！！！</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/IbK91Af32b.png-1" alt="mark"></p><p>中途演讲还好几个，没拍照了。。。</p><h3 id="中途茶歇："><a href="#中途茶歇：" class="headerlink" title="中途茶歇："></a>中途茶歇：</h3><p>去外面看了下。</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/dLm4BaJE4I.png-1" alt="mark"></p><h3 id="主会场演讲"><a href="#主会场演讲" class="headerlink" title="主会场演讲"></a>主会场演讲</h3><p>主题是：《渐进式网页应用：快速、集成、可靠并且具有吸引力》</p><p>这次坐的是前排，还拍了照，演讲人技巧很好，边演讲边带有身体动作的，而且还比较诙谐。</p><h3 id="午餐"><a href="#午餐" class="headerlink" title="午餐"></a>午餐</h3><p>胸牌上有13、14 号的午餐券，可以免费吃、免费拿，福利超好。</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/b06B2HGeC4.png-1" alt="mark"></p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/6K2lChij33.png-1" alt="mark"></p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/lCf1afKlck.png-1" alt="mark"></p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/1IJ74dJ3c1.png-1" alt="mark"></p><h3 id="下午会场"><a href="#下午会场" class="headerlink" title="下午会场"></a>下午会场</h3><p><strong>下午会场有点多，略略略。。。</strong></p><p>都拍了点照，如果想要，可以加群：528776268  找我要、</p><h3 id="晚餐"><a href="#晚餐" class="headerlink" title="晚餐"></a>晚餐</h3><p>诱惑颇大。。</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/agJcFAH7ea.png-1" alt="mark"></p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/G6G4d12jLF.png-1" alt="mark"></p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/7gm9hB1i41.png-1" alt="mark"></p><p>我还喝了杯葡萄酒。。哈哈</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/3iHm1dKfG2.png-1" alt="mark"></p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/232lbee3Dg.png-1" alt="mark"></p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/Dlb96kdIfh.png-1" alt="mark"></p><p>另外除了照片，还拍了三个视频</p><video width="400" height="800" controls="controls"><br>  <source src="http://ohfk1r827.bkt.clouddn.com/VID_20171213_183743.mp4" type="video/mp4"><br></video><p><br></p><video width="400" height="800" controls="controls"><br>  <source src="http://ohfk1r827.bkt.clouddn.com/VID_20171213_183253.mp4" type="video/mp4"><br></video><p><br></p><video width="400" height="800" controls="controls"><br>  <source src="http://ohfk1r827.bkt.clouddn.com/VID_20171213_185542.mp4" type="video/mp4"><br></video><h3 id="回家"><a href="#回家" class="headerlink" title="回家"></a>回家</h3><p>吃饱喝足，回家拍了张照</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/6ihACFehj9.png-1" alt="mark"></p><h3 id="礼物"><a href="#礼物" class="headerlink" title="礼物"></a>礼物</h3><p>到家了，整理了下今天的礼物：</p><p>贴纸一张</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/FbBIc9Gm7k.png-1" alt="mark"></p><p>小礼品一个</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/cilDBLBfDB.png-1" alt="mark"></p><p>一个可 DIY 的音箱</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/AIgb2iaEad.png-1" alt="mark"></p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/5aiiBhbAfc.png-1" alt="mark"></p><p>一个定制的手提电脑包，质量很好。</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/Lm1D2J4L60.png-1" alt="mark"></p><p>AndroidThings</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/hABaggD631.png-1" alt="mark"></p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/gmf7K6Cfgl.png-1" alt="mark"></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>全文图片较多，谢谢阅读！自己收获也挺多的，明天还有一天，可惜不打算去了，转载请注明地址：<a href="http://www.54tianzhisheng.cn/2017/12/13/Google-Developer-Days/" target="_blank" rel="noopener">http://www.54tianzhisheng.cn/2017/12/13/Google-Developer-Days/</a></p><h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><p>这个是为了防爬虫写的，哈哈</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/blog/171213/1DJAFA7Kmb.png-1&quot; alt=&quot;mark&quot;&gt;&lt;br&gt;全文图片较多，请在 WiFi 下阅读，土豪请随意！&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>使用 CodeMirror 打造属于自己的在线代码编辑器</title>
    <link href="http://yoursite.com/2017/12/09/CodeMirror/"/>
    <id>http://yoursite.com/2017/12/09/CodeMirror/</id>
    <published>2017-12-08T16:00:00.000Z</published>
    <updated>2018-01-21T11:05:55.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171209/bA6g59gGB5.jpg-1" alt="mark"></p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>写这个的目的是因为之前项目里用到过 CodeMirror，觉得作为一款在线代码编辑器还是不错，也看到过有些网站用到过在线代码编辑，当然我不知道他们是用什么做的，这里我把公司项目里用到的那部分抽出来，单独写篇博客，并把抽出来的那部分代码提交到 GitHub 去（<a href="https://github.com/zhisheng17/CoderBlog/tree/master/CodeMirror" target="_blank" rel="noopener">地址</a>），以防日后可能会再次用到（没准毕业设计里可能用的到）。<br><a id="more"></a></p><h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><p>CodeMirror 是一款在线的支持语法高亮的代码编辑器。官网： <a href="http://codemirror.net/" target="_blank" rel="noopener">http://codemirror.net/</a></p><p>可能光看官网，第一眼觉得那些在线编辑器有点<strong>丑</strong>，反正第一眼给我的感觉就是这样子，但是经过自己的细调，也能打造出一款精美的在线代码编辑器。</p><p>官网可以把它下载下来。</p><p>下载后，解压开得到的文件夹中，lib 下是放的是核心库和核心 css，mode 下放的是各种支持语言的语法定义，theme 目录下是支持的主题样式。一般在开发中，添加 lib 下的引用和 mode 下的引用就够了。</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171209/cJHjjadJ9E.png" alt="mark"></p><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>下面两个是使用 Code Mirror 必须引入的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"codemirror-5.31.0/lib/codemirror.css"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"codemirror-5.31.0/lib/codemirror.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来要引用的就是在 mode 目录下编辑器中要编辑的语言对应的 js 文件，这里以 Groovy 为例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--groovy代码高亮--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"codemirror-5.31.0/mode/groovy/groovy.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果你想让 Java 代码也支持代码高亮，则需要引入我从网上下载下来的 clike.js（我已经放到我的 GitHub 去了）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Java代码高亮必须引入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"codemirror-5.31.0/clike.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引用的文件用于支持对应语言的语法高亮。</p><p>然后前面说了第一次进入 Code Mirror 官网，觉得那些编辑器比较丑，那可能是主题比较丑，我这里推荐一款还不错的主题，只需按照如下引入即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入css文件，用以支持主题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"codemirror-5.31.0/theme/dracula.css"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>如果你还想让你的编辑器支持代码行折叠，请按照如下进行操作：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--支持代码折叠--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"codemirror-5.31.0/addon/fold/foldgutter.css"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"codemirror-5.31.0/addon/fold/foldcode.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"codemirror-5.31.0/addon/fold/foldgutter.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"codemirror-5.31.0/addon/fold/brace-fold.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"codemirror-5.31.0/addon/fold/comment-fold.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>是不是这样引入就好了呢，当然不是啦</p><h3 id="创建编辑器"><a href="#创建编辑器" class="headerlink" title="创建编辑器"></a>创建编辑器</h3><p>在实际项目中，一般都不会直接把 body 整个内容作为编辑器的容器。而最常用的，是使用 textarea。这里我在 <body> 里使用个 textarea，</body></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- begin code --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"code"</span> <span class="attr">name</span>=<span class="string">"code"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- end code--&gt;</span></span><br></pre></td></tr></table></figure><p>接下来就是创建编辑器了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据DOM元素的id构造出一个编辑器</span></span><br><span class="line"><span class="keyword">var</span> editor = CodeMirror.fromTextArea(<span class="built_in">document</span>.getElementById(<span class="string">"code"</span>), &#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>是不是有点单调？</p><p>没错，我还可以在里面给他设置些属性：（充分利用我一开始引入的那些文件）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mode: <span class="string">"text/groovy"</span>,    <span class="comment">//实现groovy代码高亮</span></span><br><span class="line">mode: <span class="string">"text/x-java"</span>, <span class="comment">//实现Java代码高亮</span></span><br><span class="line">lineNumbers: <span class="literal">true</span>,<span class="comment">//显示行号</span></span><br><span class="line">theme: <span class="string">"dracula"</span>,<span class="comment">//设置主题</span></span><br><span class="line">lineWrapping: <span class="literal">true</span>,<span class="comment">//代码折叠</span></span><br><span class="line">foldGutter: <span class="literal">true</span>,</span><br><span class="line">gutters: [<span class="string">"CodeMirror-linenumbers"</span>, <span class="string">"CodeMirror-foldgutter"</span>],</span><br><span class="line">matchBrackets: <span class="literal">true</span>,<span class="comment">//括号匹配</span></span><br><span class="line"><span class="comment">//readOnly: true,        //只读</span></span><br></pre></td></tr></table></figure><p>如果需要查看更多属性，可以去官网查找，目前我只用到这些属性！</p><p><strong>下面也列举些吧：</strong></p><p><strong>indentUnit: integer</strong><br>缩进单位，值为空格数，默认为2 。</p><p><strong>smartIndent: boolean</strong><br>自动缩进，设置是否根据上下文自动缩进（和上一行相同的缩进量）。默认为true。</p><p><strong>tabSize: integer</strong><br>tab字符的宽度，默认为4 。</p><p><strong>indentWithTabs: boolean</strong><br>在缩进时，是否需要把 n*tab宽度个空格替换成n个tab字符，默认为false 。</p><p><strong>electricChars: boolean</strong><br>在输入可能改变当前的缩进时，是否重新缩进，默认为true （仅在mode支持缩进时有效）。</p><p><strong>specialChars: RegExp</strong><br>需要被占位符(placeholder)替换的特殊字符的正则表达式。最常用的是非打印字符。默认为：/[\u0000-\u0019\u00ad\u200b-\u200f\u2028\u2029\ufeff]/。</p><p><strong>specialCharPlaceholder: function(char) → Element</strong><br>这是一个接收由specialChars选项指定的字符作为参数的函数，此函数会产生一个用来显示指定字符的DOM节点。默认情况下，显示一个红点（•），这个红点有一个带有前面特殊字符编码的提示框。</p><p><strong>rtlMoveVisually: boolean</strong><br>Determines whether horizontal cursor movement through right-to-left (Arabic, Hebrew) text is visual (pressing the left arrow moves the cursor left) or logical (pressing the left arrow moves to the next lower index in the string, which is visually right in right-to-left text). The default is false on Windows, and true on other platforms.（这段完全不晓得搞啥子鬼）</p><p><strong>keyMap: string</strong><br>配置快捷键。默认值为default，即 codemorrir.js 内部定义。其它在<a href="http://codemirror.net/keymap/" target="_blank" rel="noopener">key map</a>目录下。</p><p><strong>extraKeys: object</strong><br>给编辑器绑定与前面keyMap配置不同的快捷键。</p><p><strong>lineWrapping: boolean</strong><br>在长行时文字是换行(wrap)还是滚动(scroll)，默认为滚动(scroll)。</p><p><strong>lineNumbers: boolean</strong><br>是否在编辑器左侧显示行号。</p><p><strong>firstLineNumber: integer</strong><br>行号从哪个数开始计数，默认为1 。</p><p><strong>lineNumberFormatter: function(line: integer) → string</strong><br>使用一个函数设置行号。</p><p><strong>gutters: array<string></string></strong><br>用来添加额外的gutter（在行号gutter前或代替行号gutter）。值应该是CSS名称数组，每一项定义了用于绘制gutter背景的宽度（还有可选的背景）。为了能明确设置行号gutter的位置（默认在所有其它gutter的右边），也可以包含CodeMirror-linenumbers类。类名是用于传给setGutterMarker的键名(keys)。</p><p><strong>fixedGutter: boolean</strong><br>设置gutter跟随编辑器内容水平滚动（false）还是固定在左侧（true或默认）。</p><p><strong>scrollbarStyle: string</strong><br>设置滚动条。默认为”native”，显示原生的滚动条。核心库还提供了”null”样式，此样式会完全隐藏滚动条。Addons可以设置更多的滚动条模式。</p><p><strong>coverGutterNextToScrollbar: boolean</strong><br>当fixedGutter启用，并且存在水平滚动条时，在滚动条最左侧默认会显示gutter，当此项设置为true时，gutter会被带有CodeMirror-gutter-filler类的元素遮挡。<br><strong>inputStyle: string</strong><br>选择CodeMirror处理输入和焦点的方式。核心库定义了textarea和contenteditable输入模式。在移动浏览器上，默认是contenteditable，在桌面浏览器上，默认是textarea。在contenteditable模式下对IME和屏幕阅读器支持更好。</p><p><strong>readOnly: boolean|string</strong><br>编辑器是否只读。如果设置为预设的值 “nocursor”，那么除了设置只读外，编辑区域还不能获得焦点。</p><p><strong>showCursorWhenSelecting: boolean</strong><br>在选择时是否显示光标，默认为false。</p><p><strong>lineWiseCopyCut: boolean</strong><br>启用时，如果在复制或剪切时没有选择文本，那么就会自动操作光标所在的整行。</p><p><strong>undoDepth: integer</strong><br>最大撤消次数，默认为200（包括选中内容改变事件） 。</p><p><strong>historyEventDelay: integer</strong><br>在输入或删除时引发历史事件前的毫秒数。</p><p><strong>tabindex: integer</strong><br>编辑器的tabindex。</p><p><strong>autofocus: boolean</strong><br>是否在初始化时自动获取焦点。默认情况是关闭的。但是，在使用textarea并且没有明确指定值的时候会被自动设置为true。</p><p><strong>dragDrop: boolean</strong><br>是否允许拖放，默认为true。</p><p><strong>allowDropFileTypes: array<string></string></strong><br>默认为null。当设置此项时，只接收包含在此数组内的文件类型拖入编辑器。文件类型为MIME名称。</p><p><strong>cursorBlinkRate: number</strong><br>光标闪动的间隔，单位为毫秒。默认为530。当设置为0时，会禁用光标闪动。负数会隐藏光标。</p><p><strong>cursorScrollMargin: number</strong><br>当光标靠近可视区域边界时，光标距离上方和下方的距离。默认为0 。</p><p><strong>cursorHeight: number</strong><br>光标高度。默认为1，也就是撑满行高。对一些字体，设置0.85看起来会更好。</p><p><strong>resetSelectionOnContextMenu: boolean</strong><br>设置在选择文本外点击打开上下文菜单时，是否将光标移动到点击处。默认为true。</p><p><strong>workTime, workDelay: number</strong><br>通过一个假的后台线程高亮 workTime 时长，然后使用 timeout 休息 workDelay 时长。默认为200和300 。（完全不懂这个功能是在说啥）</p><p><strong>pollInterval: number</strong><br>指明CodeMirror向对应的textarea滚动（写数据）的速度（获得焦点时）。大多数的输入都是通过事件捕获，但是有的输入法（如IME）在某些浏览器上并不会生成事件，所以使用数据滚动。默认为100毫秒。</p><p><strong>flattenSpans: boolean</strong><br>默认情况下，CodeMirror会将使用相同class的两个span合并成一个。通过设置此项为false禁用此功能。</p><p><strong>addModeClass: boolean</strong><br>当启用时（默认禁用），会给每个标记添加额外的表示生成标记的mode的以cm-m开头的CSS样式类。例如，XML mode产生的标记，会添加cm-m-xml类。</p><p><strong>maxHighlightLength: number</strong><br>当需要高亮很长的行时，为了保持响应性能，当到达某些位置时，编辑器会直接将其他行设置为纯文本(plain text)。默认为10000，可以设置为Infinity来关闭此功能。</p><p><strong>viewportMargin: integer</strong><br>指定当前滚动到视图中内容上方和下方要渲染的行数。这会影响到滚动时要更新的行数。通常情况下应该使用默认值10。可以设置值为Infinity始终渲染整个文档。注意：这样设置在处理大文档时会影响性能。</p><hr><p>如果你要设置代码框的大小该怎么做呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">editor.setSize(<span class="string">'800px'</span>, <span class="string">'950px'</span>);     <span class="comment">//设置代码框的长宽</span></span><br></pre></td></tr></table></figure><p>另外，如果你想给代码框赋值，该怎么办呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">editor.setValue(<span class="string">""</span>);    <span class="comment">//给代码框赋值</span></span><br><span class="line">editor.getValue();    <span class="comment">//获取代码框的值</span></span><br></pre></td></tr></table></figure><p>如果你再想在其他地方设置新的属性，可以像下面这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">editor.setOption(<span class="string">"readOnly"</span>, <span class="literal">true</span>);<span class="comment">//类似这种</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>上面就大概讲了下 Code Mirror 怎么使用，那么我们来看看效果吧</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171209/C1303F6F9A.png-1" alt="mark"></p><p>我自我感觉还是可以的哈！</p><p>里面所有涉及的代码在 GitHub 里可以下载：<a href="https://github.com/zhisheng17/CoderBlog/tree/master/CodeMirror" target="_blank" rel="noopener">https://github.com/zhisheng17/CoderBlog/tree/master/CodeMirror</a></p><p>文章原创，转载务必请注明原创地址：<a href="http://www.54tianzhisheng.cn/2017/12/09/CodeMirror/" target="_blank" rel="noopener">http://www.54tianzhisheng.cn/2017/12/09/CodeMirror/</a></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>fuck  无脑的推酷爬虫，竟然把我所有文章最后的原创链接都给去掉了，这是我现在想到的一种对策方法。任何其他形式的转载，也必须把我文章所有内容加上，不得做任何修改，否则请别转载了！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/blog/171209/bA6g59gGB5.jpg-1&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h3&gt;&lt;p&gt;写这个的目的是因为之前项目里用到过 CodeMirror，觉得作为一款在线代码编辑器还是不错，也看到过有些网站用到过在线代码编辑，当然我不知道他们是用什么做的，这里我把公司项目里用到的那部分抽出来，单独写篇博客，并把抽出来的那部分代码提交到 GitHub 去（&lt;a href=&quot;https://github.com/zhisheng17/CoderBlog/tree/master/CodeMirror&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;地址&lt;/a&gt;），以防日后可能会再次用到（没准毕业设计里可能用的到）。&lt;br&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Netty 源码阅读之初始环境搭建</title>
    <link href="http://yoursite.com/2017/12/08/netty-01-env/"/>
    <id>http://yoursite.com/2017/12/08/netty-01-env/</id>
    <published>2017-12-07T16:00:00.000Z</published>
    <updated>2018-01-21T11:21:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/p4.jpeg-1" alt=""></p><h3 id="Netty-简介"><a href="#Netty-简介" class="headerlink" title="Netty 简介"></a>Netty 简介</h3><p>Netty 是由 JBOSS 提供的一个开源的 java 网络编程框架，主要是对 java 的 nio 包进行了再次封装。Netty 比 java 原生的nio 包提供了更加强大、稳定的功能和易于使用的 api。 netty 的作者是 Trustin Lee，这是一个韩国人，他还开发了另外一个著名的网络编程框架，mina。二者在很多方面都十分相似，它们的线程模型也是基本一致 。不过 netty 社区的活跃程度要 mina 高得多。<br><a id="more"></a><br>版本选择：</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171208/f3lI8Ifgdg.png-1" alt="mark"></p><p>3.x 目前企业使用最多的版本，最为稳定。例如dubbo使用的就是3.x版本</p><p>4.x 引入了内存池等重大特性，可以有效的降低GC负载，rocketmq使用的就是4.x</p><p>5.x 已经被废弃了，具体可参见 <a href="https://github.com/netty/netty/issues/4466" target="_blank" rel="noopener">https://github.com/netty/netty/issues/4466</a></p><p>所以这里我搭建的源码阅读环境是存在的 4.1 版本。</p><h3 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h3><ul><li>IDEA 2017</li></ul><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>在 IDEA 中导入项目地址：<a href="https://github.com/netty/netty.git" target="_blank" rel="noopener">https://github.com/netty/netty.git</a>   ，然后就会自动下载项目所有的依赖，但是请注意：</p><p><strong>必须在 IDEA 中将 Profiles 中的所有都勾选上</strong>，否则会导致很多 jar 包拉不下来，如下图：</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171208/F8fB27dL52.png-1" alt="mark"></p><p>然后就是耐心等待了，一直到所有的 jar 包拉取下来。</p><p>中途你可能会遇到如下问题：</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171208/Hf6LADAHlh.png-1" alt="mark"></p><p>这里的是 1.5 版本，导致我们如果想用些高级的语法会完全报错。</p><p>如果你把这个版本设置为 8 的版本后，</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171208/EgEL2iG463.png-1" alt="mark"></p><p>下面会提示你，项目是从 maven 导过来的，如果 maven 配置改变重新 reimport 后，任何在这里的改变都会丢失。</p><p>同时你会看到项目的 Java Compile 版本是 1.5 的，如下图：</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171208/CLCLeiJGfK.png-1" alt="mark"></p><p>同样，你在这里修改，如果 maven 配置改变重新 reimport 后，任何在这里的改变也都会丢失。我估计碰到这种问题的不少。</p><p>总结起来原因就是 maven 中的编译版本就是 1.5 的，所以才会导致这里的问题发生，如果想完全修改好（一劳永逸）。请直接对 pom 文件动刀，就是干！</p><p>只需把大项目（netty-parent）的那个 pom.xml 修改个属性，把版本信息提高到 1.8。</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171208/gkCi51aAg2.png-1" alt="mark"></p><p>在等待它拉取 jar 包吧</p><p>搞完了之后发现还有两个模块（netty-bom、netty-dev-tools）不能设置到 版本，只能手动的和上面那种设置 language level 和 Java compile 为 1.8 了。</p><p>最后你会发现这里的完全没有报错了，开心不？</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171208/D0liIHeAFa.png-1" alt="mark"></p><h3 id="代码行数统计"><a href="#代码行数统计" class="headerlink" title="代码行数统计"></a>代码行数统计</h3><p>额，看到项目这么多子模块，你都不知道该从哪里下手开始看，那么我就写了个简单的 Java 脚本去大概的统计每个子项目代码的行数。先看看统计结果：</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171208/GhmkD1K8Kd.png-1" alt="mark"></p><p>整个项目差不多 23 万。（过滤了空行、各种注释和 <code>@Override</code> 之后的 Java 代码行数），靠这个数字很吓人！</p><p>来看看我的脚本代码吧：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> count = Files.walk(Paths.get(<span class="string">"C:\\JetBrains\\IDEAProject\\netty\\transport-udt"</span>))    <span class="comment">// 递归获得项目目录下的所有文件</span></span><br><span class="line">            .filter(file -&gt; !Files.isDirectory(file))   <span class="comment">// 筛选出文件</span></span><br><span class="line">            .filter(file -&gt; file.toString().endsWith(<span class="string">".java"</span>))  <span class="comment">// 筛选出 java 文件</span></span><br><span class="line">            .flatMap(Try.of(file -&gt; Files.lines(file), Stream.empty()))     <span class="comment">// 将会抛出受检异常的 Lambda 包装为 抛出非受检异常的 Lambda</span></span><br><span class="line">            .filter(line -&gt; !line.trim().isEmpty())         <span class="comment">// 过滤掉空行</span></span><br><span class="line">            .filter(line -&gt; !line.trim().startsWith(<span class="string">"//"</span>))  <span class="comment">//过滤掉 //之类的注释</span></span><br><span class="line">            .filter(line -&gt; !(line.trim().startsWith(<span class="string">"/*"</span>) &amp;&amp; line.trim().endsWith(<span class="string">"*/"</span>)))  <span class="comment">//过滤掉/* */之类的注释</span></span><br><span class="line">            .filter(line -&gt; !(line.trim().startsWith(<span class="string">"/*"</span>) &amp;&amp; !line.trim().endsWith(<span class="string">"*/"</span>)))     <span class="comment">//过滤掉以 /* 开头的注释（去除空格后的开头）</span></span><br><span class="line">            .filter(line -&gt; !(!line.trim().startsWith(<span class="string">"/*"</span>) &amp;&amp; line.trim().endsWith(<span class="string">"*/"</span>)))     <span class="comment">//过滤掉已 */ 结尾的注释</span></span><br><span class="line">            .filter(line -&gt; !line.trim().startsWith(<span class="string">"*"</span>))   <span class="comment">//过滤掉 javadoc 中的文字注释</span></span><br><span class="line">            .filter(line -&gt; !line.trim().startsWith(<span class="string">"@Override"</span>))   <span class="comment">//过滤掉方法上含 @Override 的</span></span><br><span class="line">            .count();</span><br><span class="line">    System.out.println(<span class="string">"代码行数："</span> + count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面我会把我阅读源码的中文注释及解析之类的更新到我的 GitHub 去（欢迎关注、我是来骗 star 的），<a href="https://github.com/zhisheng17/netty" target="_blank" rel="noopener">https://github.com/zhisheng17/netty</a>    ，如果你不想去自己设置上面所说的这些（偷懒），那就直接 fork 我的这份吧！</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>环境搭建就写到这里了，转载请注明地址：<a href="http://www.54tianzhisheng.cn/2017/12/08/netty-01-env/" target="_blank" rel="noopener">http://www.54tianzhisheng.cn/2017/12/08/netty-01-env/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/p4.jpeg-1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Netty-简介&quot;&gt;&lt;a href=&quot;#Netty-简介&quot; class=&quot;headerlink&quot; title=&quot;Netty 简介&quot;&gt;&lt;/a&gt;Netty 简介&lt;/h3&gt;&lt;p&gt;Netty 是由 JBOSS 提供的一个开源的 java 网络编程框架，主要是对 java 的 nio 包进行了再次封装。Netty 比 java 原生的nio 包提供了更加强大、稳定的功能和易于使用的 api。 netty 的作者是 Trustin Lee，这是一个韩国人，他还开发了另外一个著名的网络编程框架，mina。二者在很多方面都十分相似，它们的线程模型也是基本一致 。不过 netty 社区的活跃程度要 mina 高得多。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Netty" scheme="http://yoursite.com/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>RestTemplate 详解</title>
    <link href="http://yoursite.com/2017/12/03/RestTemplate/"/>
    <id>http://yoursite.com/2017/12/03/RestTemplate/</id>
    <published>2017-12-02T16:00:00.000Z</published>
    <updated>2018-01-21T11:23:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/p3.jpeg-1" alt=""></p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>这段时间自己做的项目中需要调用服务提供者的服务（接口），具体就是：我这边需要将页面所输入的 Groovy 脚本代码传给别人提供的服务接口，然后那边返回脚本编译的结果给我，我需要将编译结果展示在页面，用的就是 RestTemplate 了，那 RestTemplate 是什么呢？简单说就是：简化了发起 HTTP 请求以及处理响应的过程，并且支持 REST 。下文就稍微总结下。<br><a id="more"></a></p><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>先讲讲如何使用吧，我项目是 SpringBoot 项目，可以在启动类中加入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在 Controller 层中引入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RestTemplate restTemplate;</span><br></pre></td></tr></table></figure><p>接下来就可以在 Controller 中各个方法中使用 restTemplate 了，但是 restTemplate 里面有什么方法呢？</p><h3 id="RestTemplate-内部方法"><a href="#RestTemplate-内部方法" class="headerlink" title="RestTemplate 内部方法"></a>RestTemplate 内部方法</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171203/dB18a2j7bi.png-1" alt="mark"></p><p>从图中 RestTemplate 可以看到有很多方法，我们可以提取出主要的几种方法是：</p><ul><li><strong>GET</strong></li><li><strong>POST</strong></li><li><strong>PUT</strong></li><li><strong>DELETE</strong></li><li><strong>HEAD</strong></li><li><strong>OPTIONS</strong></li><li><strong>EXCHANGE</strong></li><li><strong>EXECUTE</strong></li></ul><p>图片中依然可以知道 RestTemplate 类中的方法主要是来自接口 RestOperations，下面我们具体看看这些方法里面的具体实现与该如何使用。</p><h3 id="Get-方法"><a href="#Get-方法" class="headerlink" title="Get 方法"></a>Get 方法</h3><p>在 RestTemplate 中，发送一个 GET 请求，我们可以通过如下两种方式：</p><ul><li><p><strong>getForEntity</strong></p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171203/HIdKJdjkCC.png-1" alt="mark"></p><p>getForEntity 方法的返回值是一个<code>ResponseEntity&lt;T&gt;</code>，<code>ResponseEntity&lt;T&gt;</code>是 Spring 对 HTTP 请求响应的封装，包括了几个重要的元素，如响应码、contentType、contentLength、响应消息体等。比如下面一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/gethello"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ResponseEntity&lt;String&gt; responseEntity = restTemplate.getForEntity(<span class="string">"http://HELLO-SERVICE/hello"</span>, String.class);</span><br><span class="line">    String body = responseEntity.getBody();</span><br><span class="line">    HttpStatus statusCode = responseEntity.getStatusCode();</span><br><span class="line">    <span class="keyword">int</span> statusCodeValue = responseEntity.getStatusCodeValue();</span><br><span class="line">    HttpHeaders headers = responseEntity.getHeaders();</span><br><span class="line">    StringBuffer result = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    result.append(<span class="string">"responseEntity.getBody()："</span>).append(body).append(<span class="string">"&lt;hr&gt;"</span>)</span><br><span class="line">            .append(<span class="string">"responseEntity.getStatusCode()："</span>).append(statusCode).append(<span class="string">"&lt;hr&gt;"</span>)</span><br><span class="line">            .append(<span class="string">"responseEntity.getStatusCodeValue()："</span>).append(statusCodeValue).append(<span class="string">"&lt;hr&gt;"</span>)</span><br><span class="line">            .append(<span class="string">"responseEntity.getHeaders()："</span>).append(headers).append(<span class="string">"&lt;hr&gt;"</span>);</span><br><span class="line">    <span class="keyword">return</span> result.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于这段代码，说如下几点：</p><ul><li><p>getForEntity 的第一个参数为我要调用的服务的地址，这里我调用了服务提供者提供的 /hello 接口，注意这里是通过服务名调用而不是服务地址，如果写成服务地址就没法实现客户端负载均衡了。（备注：我项目中需要通过 ConsulClient 去获取服务名，然后在去获取服务的 IP 和 Port，并把它拼接起来组合成我的服务地址，所以就没法实现客户端的负载均衡了，如果要是实现负载均衡，可以在 SpringBoot 启动类的中加入注解 <code>@LoadBalanced</code>, 如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> ）</p></li><li><p>getForEntity 第二个参数 String.class 表示我希望返回的 body 类型是 String</p></li><li><p>拿到返回结果之后，将返回结果遍历打印出来</p></li></ul><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171203/97g3ha24HG.png" alt="mark"></p></li></ul><p>  有时候我在调用服务提供者提供的接口时，可能需要传递参数，有两种不同的方式:</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/sayhello"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ResponseEntity&lt;String&gt; responseEntity = restTemplate.getForEntity(<span class="string">"http://HELLO-SERVICE/sayhello?name=&#123;1&#125;"</span>, String.class, <span class="string">"张三"</span>);</span><br><span class="line">    <span class="keyword">return</span> responseEntity.getBody();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/sayhello2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHello2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"name"</span>, <span class="string">"李四"</span>);</span><br><span class="line">    ResponseEntity&lt;String&gt; responseEntity = restTemplate.getForEntity(<span class="string">"http://HELLO-SERVICE/sayhello?name=&#123;name&#125;"</span>, String.class, map);</span><br><span class="line">    <span class="keyword">return</span> responseEntity.getBody();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以用一个数字做占位符，最后是一个可变长度的参数，来一 一替换前面的占位符</li><li><p>也可以前面使用 name={name} 这种形式，最后一个参数是一个 map，map 的 key 即为前边占位符的名字，map的 value 为参数值</p><p>第一个调用地址也可以是一个URI而不是字符串，这个时候我们构建一个URI即可，参数神马的都包含在URI中了，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/sayhello3"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHello3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    UriComponents uriComponents = UriComponentsBuilder.fromUriString(<span class="string">"http://HELLO-SERVICE/sayhello?name=&#123;name&#125;"</span>).build().expand(<span class="string">"王五"</span>).encode();</span><br><span class="line">    URI uri = uriComponents.toUri();</span><br><span class="line">    ResponseEntity&lt;String&gt; responseEntity = restTemplate.getForEntity(uri, String.class);</span><br><span class="line">    <span class="keyword">return</span> responseEntity.getBody();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过Spring中提供的UriComponents来构建Uri即可。</p><p>当然，服务提供者不仅可以返回String，也可以返回一个自定义类型的对象，比如我的服务提供者中有如下方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/getbook1"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">book1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Book(<span class="string">"三国演义"</span>, <span class="number">90</span>, <span class="string">"罗贯中"</span>, <span class="string">"花城出版社"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于该方法我可以在服务消费者中通过如下方式来调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/book1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">book1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ResponseEntity&lt;Book&gt; responseEntity = restTemplate.getForEntity(<span class="string">"http://HELLO-SERVICE/getbook1"</span>, Book.class);</span><br><span class="line">    <span class="keyword">return</span> responseEntity.getBody();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171203/jHbbB37bjC.png" alt="mark"></p></li></ul><ul><li><p><strong>getForObject</strong></p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171203/hbllDEdjLe.png-1" alt="mark"><br>​</p><p>getForObject 函数实际上是对 getForEntity 函数的进一步封装，如果你只关注返回的消息体的内容，对其他信息都不关注，此时可以使用 getForObject，举一个简单的例子，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/book2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">book2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Book book = restTemplate.getForObject(<span class="string">"http://HELLO-SERVICE/getbook1"</span>, Book.class);</span><br><span class="line">    <span class="keyword">return</span> book;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="POST-方法"><a href="#POST-方法" class="headerlink" title="POST 方法"></a>POST 方法</h3><p>在 RestTemplate 中，POST 请求可以通过如下三个方法来发起：</p><ul><li><p><strong>postForEntity</strong></p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171203/Lb08cmh0CL.png-1" alt="mark"></p><p>该方法和get请求中的getForEntity方法类似，如下例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/book3"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">book3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Book book = <span class="keyword">new</span> Book();</span><br><span class="line">    book.setName(<span class="string">"红楼梦"</span>);</span><br><span class="line">    ResponseEntity&lt;Book&gt; responseEntity = restTemplate.postForEntity(<span class="string">"http://HELLO-SERVICE/getbook2"</span>, book, Book.class);</span><br><span class="line">    <span class="keyword">return</span> responseEntity.getBody();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方法的第一参数表示要调用的服务的地址</li><li>方法的第二个参数表示上传的参数</li><li>方法的第三个参数表示返回的消息体的数据类型</li></ul><p>我这里创建了一个Book对象，这个Book对象只有name属性有值，将之传递到服务提供者那里去，服务提供者代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/getbook2"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">book2</span><span class="params">(@RequestBody Book book)</span> </span>&#123;</span><br><span class="line">    System.out.println(book.getName());</span><br><span class="line">    book.setPrice(<span class="number">33</span>);</span><br><span class="line">    book.setAuthor(<span class="string">"曹雪芹"</span>);</span><br><span class="line">    book.setPublisher(<span class="string">"人民文学出版社"</span>);</span><br><span class="line">    <span class="keyword">return</span> book;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务提供者接收到服务消费者传来的参数book，给其他属性设置上值再返回，调用结果如下：</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171203/aFjFlhl4l2.png" alt="mark"></p></li><li><p><strong>postForObject</strong></p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171203/ij0G627Flh.png-1" alt="mark"></p><p>如果你只关注，返回的消息体，可以直接使用postForObject。用法和getForObject一致。</p></li><li><p><strong>postForLocation</strong></p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171203/2dhJF1ld7b.png-1" alt="mark"></p><p>postForLocation 也是提交新资源，提交成功之后，返回新资源的 URI，postForLocation 的参数和前面两种的参数基本一致，只不过该方法的返回值为 URI ，这个只需要服务提供者返回一个 URI 即可，该 URI 表示新资源的位置。</p></li></ul><h3 id="PUT-方法"><a href="#PUT-方法" class="headerlink" title="PUT 方法"></a>PUT 方法</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171203/C7EJl11A7a.png-1" alt="mark"></p><p>在 RestTemplate 中，PUT 请求可以通过 put 方法调用，put 方法的参数和前面介绍的 postForEntity 方法的参数基本一致，只是 put 方法没有返回值而已。举一个简单的例子，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/put"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Book book = <span class="keyword">new</span> Book();</span><br><span class="line">    book.setName(<span class="string">"红楼梦"</span>);</span><br><span class="line">    restTemplate.put(<span class="string">"http://HELLO-SERVICE/getbook3/&#123;1&#125;"</span>, book, <span class="number">99</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>book对象是我要提交的参数，最后的99用来替换前面的占位符{1}</p><h3 id="DELETE-方法"><a href="#DELETE-方法" class="headerlink" title="DELETE 方法"></a>DELETE 方法</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171203/gF7ID9a8bk.png-1" alt="mark"></p><p>delete 请求我们可以通过 delete 方法调用来实现，如下例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/delete"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    restTemplate.delete(<span class="string">"http://HELLO-SERVICE/getbook4/&#123;1&#125;"</span>, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HEADER-方法"><a href="#HEADER-方法" class="headerlink" title="HEADER 方法"></a>HEADER 方法</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171203/707a2704Ij.png-1" alt="mark"></p><p>返回资源的所有 HTTP headers。</p><h3 id="OPTIONS"><a href="#OPTIONS" class="headerlink" title="OPTIONS"></a>OPTIONS</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171203/DGJF2243G2.png-1" alt="mark"></p><p>问可以执行哪些方法。</p><h3 id="EXCHANGE"><a href="#EXCHANGE" class="headerlink" title="EXCHANGE"></a>EXCHANGE</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171203/CmFD4kl9g4.png-1" alt="mark"></p><p>与其它接口的不同：</p><ul><li>允许调用者指定HTTP请求的方法（GET,POST,PUT等）</li><li>可以在请求中增加body以及头信息，其内容通过参数 HttpEntity&lt;?&gt;requestEntity 描述</li><li>exchange支持‘含参数的类型’（即泛型类）作为返回类型，该特性通过 ParameterizedTypeReference<t>responseType 描述</t></li></ul><h3 id="EXECUTE"><a href="#EXECUTE" class="headerlink" title="EXECUTE"></a>EXECUTE</h3><p>细心的你，不知道有没有发现上面所有的方法内部返回值都调用了同一个方法 —— execute  方法。</p><p>下面我们来看看：</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171203/1l7Il8faKH.png-1" alt="mark"></p><p>可以看到，Excute方法只是将 String 格式的 URI 转成了 java.net.URI，之后调用了doExecute方法。整个调用过程关键起作用的是 doExecute 方法</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171203/756HHijFIh.png-1" alt="mark"></p><h3 id="doExecute-方法"><a href="#doExecute-方法" class="headerlink" title="doExecute 方法"></a>doExecute 方法</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171203/A9dgDiG1JL.png-1" alt="mark"></p><p>这里需要了解两个类： RequestCallback 和 ResponseExtractor</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171203/B7k85lBkBk.png-1" alt="mark"></p><p>RestTemplate 类中可以看到他们两的实现类。</p><p><strong>RequestCallback</strong> ：用于操作请求头和body，在请求发出前执行。</p><p>该接口有两个实现类：</p><table><thead><tr><th style="text-align:left">AcceptHeaderRequestCallback</th><th style="text-align:left">只处理请求头，用于getXXX()方法。</th></tr></thead><tbody><tr><td style="text-align:left">HttpEntityRequestCallback</td><td style="text-align:left">继承于AcceptHeaderRequestCallback可以处理请求头和body，用于putXXX()、postXXX()和exchange()方法。</td></tr></tbody></table><p><strong>ResponseExtractor</strong>：解析HTTP响应的数据，而且不需要担心异常和资源的关闭</p><p>上面图纸这个实现类 ResponseEntityResponseExtractor 的作用是：使用 HttpMessageConverterExtractor 提取 body（委托模式），然后将 body 和响应头、状态封装成 ResponseEntity 对象。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>转载请注明地址：<a href="http://www.54tianzhisheng.cn/2017/12/03/RestTemplate/" target="_blank" rel="noopener">http://www.54tianzhisheng.cn/2017/12/03/RestTemplate/</a></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>1、<a href="https://www.cnblogs.com/caolei1108/p/6169950.html" target="_blank" rel="noopener">https://www.cnblogs.com/caolei1108/p/6169950.html</a></p><p>2、<a href="https://segmentfault.com/a/1190000011093597" target="_blank" rel="noopener">https://segmentfault.com/a/1190000011093597</a></p><p>如果想和我进一步交流请关注：</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171203/h5HaHC6g12.png-1" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/p3.jpeg-1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;这段时间自己做的项目中需要调用服务提供者的服务（接口），具体就是：我这边需要将页面所输入的 Groovy 脚本代码传给别人提供的服务接口，然后那边返回脚本编译的结果给我，我需要将编译结果展示在页面，用的就是 RestTemplate 了，那 RestTemplate 是什么呢？简单说就是：简化了发起 HTTP 请求以及处理响应的过程，并且支持 REST 。下文就稍微总结下。&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>实习圈群里提问小记</title>
    <link href="http://yoursite.com/2017/12/02/wx-01/"/>
    <id>http://yoursite.com/2017/12/02/wx-01/</id>
    <published>2017-12-01T16:00:00.000Z</published>
    <updated>2018-01-21T11:27:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/p2.jpeg-1" alt=""></p><a id="more"></a><p><img src="http://ohfk1r827.bkt.clouddn.com/wx-01.png-1" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/p2.jpeg-1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="实习圈" scheme="http://yoursite.com/tags/%E5%AE%9E%E4%B9%A0%E5%9C%88/"/>
    
  </entry>
  
  <entry>
    <title>基于 Harbor 搭建 Docker 私有镜像仓库</title>
    <link href="http://yoursite.com/2017/11/26/Docker-harbor/"/>
    <id>http://yoursite.com/2017/11/26/Docker-harbor/</id>
    <published>2017-11-25T16:00:00.000Z</published>
    <updated>2018-01-21T11:08:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171126/j9de1Jf6m0.png-1" alt="mark"></p><h3 id="什么是-Harbor？"><a href="#什么是-Harbor？" class="headerlink" title="什么是 Harbor？"></a>什么是 Harbor？</h3><p>第一次使用这个的时候是刚进公司处理的第一个任务的时候，发现 Harbor 就是一个用于存储和分发 Docker 镜像的企业级Registry 服务器。<br><a id="more"></a><br>网上找到一个 Harbor 的架构图：</p><p><img src="http://img.blog.csdn.net/20170912121921883?/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDI3ODkyMw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p><p>Harbor 是 VMware 公司开源的企业级 DockerRegistry 项目，项目地址为 <a href="https://github.com/vmware/harbor。其目标是帮助用户迅速搭建一个企业级的" target="_blank" rel="noopener">https://github.com/vmware/harbor。其目标是帮助用户迅速搭建一个企业级的</a> Docker registry 服务。它以 Docker 公司开源的 registry 为基础，提供了管理UI，基于角色的访问控制(Role Based Access Control)，AD/LDAP集成、以及审计日志(Auditlogging) 等企业用户需求的功能，同时还原生支持中文。Harbor 的每个组件都是以 Docker 容器的形式构建的，使用 Docker Compose 来对它进行部署。</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>1、自己在腾讯云买的服务器（CentOS7.3）</p><p>2、Docker 版本：17.05.0-ce</p><p>3、Docker-compose：1.17.1</p><p>4、Harbor：1.1.2</p><h3 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h3><p>因为系统是 CentOS 7.3 ，内核啥的都已经是 3.10，所以不用担心内核升级的问题，一些操作啥的在 7.x 上操作也很方便。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">yum  update                             //系统版本更新</span><br><span class="line"></span><br><span class="line">vim /etc/yum.repos.d/docker.repo        //添加以下内容</span><br><span class="line"></span><br><span class="line">[dockerrepo]</span><br><span class="line">name=Docker Repository</span><br><span class="line">baseurl=https://yum.dockerproject.org/repo/main/centos/7/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://yum.dockerproject.org/gpg</span><br><span class="line"></span><br><span class="line">//下面安装 Docker 引擎</span><br><span class="line">yum install docker-engine  -y</span><br><span class="line"></span><br><span class="line">//安装docker引擎，此步也可作为更新docker版本的操作：先#systemctl stop docker 停止docker服务，再#yum install docker-engine 更新docker版本</span><br><span class="line"></span><br><span class="line">systemctl  enable  docker.service</span><br><span class="line"></span><br><span class="line">systemctl  start   docker              //启动docker守护进程</span><br><span class="line"></span><br><span class="line">docker info                            //查看docker运行情况</span><br><span class="line"></span><br><span class="line">docker -v//查看版本信息</span><br></pre></td></tr></table></figure><p>修改 Docker 配置文件 /etc/default/docker 如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DOCKER_OPTS="--registry-mirror=http://aad0405c.m.daocloud.io"//换成国内的镜像加速源，不然拉取镜像简直龟速，不想在吐槽了</span><br></pre></td></tr></table></figure><p>使用 <code>service docker restart</code> 重启 Docker 服务即可。</p><p>或者用官方提供的方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://ef017c13.m.daocloud.io</span><br></pre></td></tr></table></figure><h3 id="安装-Docker-compose"><a href="#安装-Docker-compose" class="headerlink" title="安装 Docker-compose"></a>安装 Docker-compose</h3><p>如果是想直接命令安装也行，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">下载指定版本的docker-compose</span><br><span class="line"></span><br><span class="line">sudo curl -L https://github.com/docker/compose/releases/download/1.17.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line">对二进制文件赋可执行权限</span><br><span class="line"></span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line">测试下docker-compose是否安装成功</span><br><span class="line"></span><br><span class="line">docker-compose --version</span><br><span class="line"></span><br><span class="line">出现如下</span><br><span class="line">docker-compose version 1.17.1, build 6d101fb</span><br></pre></td></tr></table></figure><p>但是，这种方法简直龟速，幸好还有种方法，</p><p>见这里：<a href="https://docs.docker.com/compose/install/#install-compose" target="_blank" rel="noopener">https://docs.docker.com/compose/install/#install-compose</a></p><p>这种需要通过 Python 的 pip 安装</p><h4 id="安装-pip"><a href="#安装-pip" class="headerlink" title="安装 pip"></a>安装 pip</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://pypi.python.org/packages/source/s/setuptools/setuptools-1.4.2.tar.gz</span><br><span class="line"></span><br><span class="line">tar -vxf setuptools-1.4.2.tar.gz</span><br><span class="line"></span><br><span class="line">cd setuptools-1.4.2</span><br><span class="line"></span><br><span class="line">python2.7 setup.py install//因为服务器自带 Python 2.7</span><br><span class="line"></span><br><span class="line">easy_install-2.7 pip</span><br></pre></td></tr></table></figure><h4 id="安装-docker-compose"><a href="#安装-docker-compose" class="headerlink" title="安装 docker compose"></a>安装 docker compose</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install docker-compose</span><br><span class="line"></span><br><span class="line">docker-compose --version//测试安装是否成功</span><br></pre></td></tr></table></figure><h3 id="安装-Harbor"><a href="#安装-Harbor" class="headerlink" title="安装 Harbor"></a>安装 Harbor</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/vmware/harbor/releases/download/v1.1.2/harbor-offline-installer-v1.1.2.tgz</span><br><span class="line"></span><br><span class="line">离线安装包,也是龟速，把这个下载链接用迅雷下载，速度却贼快，嘿嘿，然后再传到服务器上去，整个过程快很多！</span><br><span class="line"></span><br><span class="line">tar -zxvf harbor-offline-installer-v1.1.2.tgz</span><br></pre></td></tr></table></figure><p>解压缩之后，进入目录下会看到 harbor.cfg 文件，该文件就是 Harbor 的配置文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">## Configuration file of Harbor</span><br><span class="line"></span><br><span class="line"># hostname设置访问地址，可以使用ip、域名，不可以设置为127.0.0.1或localhost</span><br><span class="line">hostname = 115.159.227.249   #这里我先配置我的服务器IP地址</span><br><span class="line"></span><br><span class="line"># 访问协议，默认是http，也可以设置https，如果设置https，则nginx ssl需要设置on</span><br><span class="line">ui_url_protocol = http</span><br><span class="line"></span><br><span class="line"># mysql数据库root用户默认密码root123，实际使用时修改下</span><br><span class="line">db_password = root123</span><br><span class="line"></span><br><span class="line">#Maximum number of job workers in job service</span><br><span class="line">max_job_workers = 3</span><br><span class="line"></span><br><span class="line">#Determine whether or not to generate certificate for the registry&apos;s token.</span><br><span class="line">#If the value is on, the prepare script creates new root cert and private key</span><br><span class="line">#for generating token to access the registry. If the value is off the default key/cert will be used.</span><br><span class="line">#This flag also controls the creation of the notary signer&apos;s cert.</span><br><span class="line">customize_crt = on</span><br><span class="line"></span><br><span class="line">#The path of cert and key files for nginx, they are applied only the protocol is set to https</span><br><span class="line">ssl_cert = /data/cert/server.crt</span><br><span class="line">ssl_cert_key = /data/cert/server.key</span><br><span class="line"></span><br><span class="line">#The path of secretkey storage</span><br><span class="line">secretkey_path = /data</span><br><span class="line"></span><br><span class="line">#Admiral&apos;s url, comment this attribute, or set its value to NA when Harbor is standalone</span><br><span class="line">admiral_url = NA</span><br><span class="line"></span><br><span class="line">#NOTES: The properties between BEGIN INITIAL PROPERTIES and END INITIAL PROPERTIES</span><br><span class="line">#only take effect in the first boot, the subsequent changes of these properties</span><br><span class="line">#should be performed on web ui</span><br><span class="line"></span><br><span class="line">#************************BEGIN INITIAL PROPERTIES************************</span><br><span class="line"></span><br><span class="line">#Email account settings for sending out password resetting emails.</span><br><span class="line"></span><br><span class="line">#Email server uses the given username and password to authenticate on TLS connections to host and act as identity.</span><br><span class="line">#Identity left blank to act as username.</span><br><span class="line">email_identity =</span><br><span class="line"></span><br><span class="line">email_server = smtp.mydomain.com</span><br><span class="line">email_server_port = 25</span><br><span class="line">email_username = sample_admin@mydomain.com</span><br><span class="line">email_password = abc</span><br><span class="line">email_from = admin &lt;sample_admin@mydomain.com&gt;</span><br><span class="line">email_ssl = false</span><br><span class="line"></span><br><span class="line">##The initial password of Harbor admin, only works for the first time when Harbor starts.</span><br><span class="line">#It has no effect after the first launch of Harbor.</span><br><span class="line"># 启动Harbor后，管理员UI登录的密码，默认是Harbor12345</span><br><span class="line">harbor_admin_password = Harbor12345</span><br><span class="line"></span><br><span class="line"># 认证方式，这里支持多种认证方式，如LADP、本次存储、数据库认证。默认是db_auth，mysql数据库认证</span><br><span class="line">auth_mode = db_auth</span><br><span class="line"></span><br><span class="line">#The url for an ldap endpoint.</span><br><span class="line">ldap_url = ldaps://ldap.mydomain.com</span><br><span class="line"></span><br><span class="line">#A user&apos;s DN who has the permission to search the LDAP/AD server.</span><br><span class="line">#If your LDAP/AD server does not support anonymous search, you should configure this DN and ldap_search_pwd.</span><br><span class="line">#ldap_searchdn = uid=searchuser,ou=people,dc=mydomain,dc=com</span><br><span class="line"></span><br><span class="line">#the password of the ldap_searchdn</span><br><span class="line">#ldap_search_pwd = password</span><br><span class="line"></span><br><span class="line">#The base DN from which to look up a user in LDAP/AD</span><br><span class="line">ldap_basedn = ou=people,dc=mydomain,dc=com</span><br><span class="line"></span><br><span class="line">#Search filter for LDAP/AD, make sure the syntax of the filter is correct.</span><br><span class="line">#ldap_filter = (objectClass=person)</span><br><span class="line"></span><br><span class="line"># The attribute used in a search to match a user, it could be uid, cn, email, sAMAccountName or other attributes de</span><br><span class="line">pending on your LDAP/AD  ldap_uid = uid</span><br><span class="line"></span><br><span class="line">#the scope to search for users, 1-LDAP_SCOPE_BASE, 2-LDAP_SCOPE_ONELEVEL, 3-LDAP_SCOPE_SUBTREE</span><br><span class="line">ldap_scope = 3</span><br><span class="line"></span><br><span class="line">#Timeout (in seconds)  when connecting to an LDAP Server. The default value (and most reasonable) is 5 seconds.</span><br><span class="line">ldap_timeout = 5</span><br><span class="line"></span><br><span class="line"># 是否开启自注册</span><br><span class="line">self_registration = on</span><br><span class="line"></span><br><span class="line"># Token有效时间，默认30分钟</span><br><span class="line">token_expiration = 30</span><br><span class="line"></span><br><span class="line"># 用户创建项目权限控制，默认是everyone（所有人），也可以设置为adminonly（只能管理员）</span><br><span class="line">project_creation_restriction = everyone</span><br><span class="line"></span><br><span class="line">#Determine whether the job service should verify the ssl cert when it connects to a remote registry.</span><br><span class="line">#Set this flag to off when the remote registry uses a self-signed or untrusted certificate.</span><br><span class="line">verify_remote_cert = on</span><br><span class="line">#************************END INITIAL PROPERTIES************************</span><br></pre></td></tr></table></figure><p>启动 harbor，修改完配置文件后，在的当前目录执行<code>./install.sh</code>，Harbor服务就会根据当期目录下的<code>docker-compose.yml</code>开始下载依赖的镜像，检测并按照顺序依次启动各个服务。</p><p>启动完成后，我们访问刚设置的 hostname 即可，<a href="http://115.159.227.249/，默认是80端口，如果端口占用，我们可以去修改docker-compose.yml文件中，对应服务的端口映射。" target="_blank" rel="noopener">http://115.159.227.249/，默认是80端口，如果端口占用，我们可以去修改docker-compose.yml文件中，对应服务的端口映射。</a></p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171126/JgL96AjdEc.jpg-1" alt="mark"></p><p>登录 Web Harbor , 输入用户名 admin，默认密码（或已修改密码）登录系统。</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171126/b98k9d2jcE.png-1" alt="mark"></p><p>我们可以看到系统各个模块如下：</p><ul><li>项目：新增/删除项目，查看镜像仓库，给项目添加成员、查看操作日志、复制项目等</li><li>日志：仓库各个镜像create、push、pull等操作日志</li><li>系统管理<ul><li>用户管理：新增/删除用户、设置管理员等</li><li>复制管理：新增/删除从库目标、新建/删除/启停复制规则等</li><li>配置管理：认证模式、复制、邮箱设置、系统设置等</li></ul></li><li>其他设置<ul><li>用户设置：修改用户名、邮箱、名称信息</li><li>修改密码：修改用户密码</li></ul></li></ul><p>注意：非系统管理员用户登录，只能看到有权限的项目和日志，其他模块不可见。</p><p>我们要尝试下能不能把自己 Docker 里面的镜像 push 到 Harbor 的 library 里来（默认这个 library 项目是公开的，所有人都可以有读的权限，都不需要 docker login 进来，就可以拉取里面的镜像）。</p><p><strong>注意：</strong></p><p>为了后面留坑，我这里先 在自己的 docker.service 中添加仓库：（这是个坑，建议你先按照我说的做，不然下面可能会一直登录不上）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/docker.service</span><br><span class="line"></span><br><span class="line">里面的这行修改为：（其实就是添加 --insecure-registry 115.159.227.249 ）</span><br><span class="line">ExecStart=/usr/bin/dockerd --insecure-registry 115.159.227.249</span><br></pre></td></tr></table></figure><p>添加完了后重新启动 docker：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload &amp;&amp; systemctl enable docker &amp;&amp; systemctl start docker</span><br></pre></td></tr></table></figure><p>启动 docker 服务:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker start</span><br></pre></td></tr></table></figure><p>登录：（为了测试下能否登录成功）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">admin登录</span><br><span class="line">$ docker login 115.159.227.249</span><br><span class="line">Username: admin</span><br><span class="line">Password:</span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure><p>打 tag 并 push</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker tag ubuntu:15.10  115.159.227.249/library/ubuntu:15.10//给我的镜像打个 tag</span><br><span class="line"></span><br><span class="line">docker push  115.159.227.249/library/ubuntu</span><br><span class="line"></span><br><span class="line">The push refers to a repository [115.159.227.249/library/ubuntu]</span><br><span class="line">98d59071f692: Pushed</span><br><span class="line">af288f00b8a7: Pushed</span><br><span class="line">4b955941a4d0: Pushed</span><br><span class="line">f121afdbbd5d: Pushed</span><br><span class="line">15.10: digest: sha256:ec89c4a90f45f5e103860191890f48d8379e0504a2881ff706aef0768dc0321b size: 1150</span><br></pre></td></tr></table></figure><p>上传完毕后，登录Web Harbor，选择项目 library，就可以看到我刚 push 的镜像了。</p><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171126/0d82GLa1Cb.png-1" alt="mark"></p><p>同理，你也可以测试下从 Harbor pull 镜像到你的 Docker 中去，这里就不继续演示了。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>转载请注明地址为：<a href="http://www.54tianzhisheng.cn/2017/11/26/Docker-harbor/" target="_blank" rel="noopener">http://www.54tianzhisheng.cn/2017/11/26/Docker-harbor/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/blog/171126/j9de1Jf6m0.png-1&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;什么是-Harbor？&quot;&gt;&lt;a href=&quot;#什么是-Harbor？&quot; class=&quot;headerlink&quot; title=&quot;什么是 Harbor？&quot;&gt;&lt;/a&gt;什么是 Harbor？&lt;/h3&gt;&lt;p&gt;第一次使用这个的时候是刚进公司处理的第一个任务的时候，发现 Harbor 就是一个用于存储和分发 Docker 镜像的企业级Registry 服务器。&lt;br&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>谈谈我的理财</title>
    <link href="http://yoursite.com/2017/11/18/Money-management/"/>
    <id>http://yoursite.com/2017/11/18/Money-management/</id>
    <published>2017-11-17T16:00:00.000Z</published>
    <updated>2018-01-21T11:19:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/p5.jpeg-1" alt=""><br><a id="more"></a></p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>最开始接触理财是去年的时候，在我的一个群里（几个好朋友），有个朋友他女朋友是学金融的，当时还开玩笑地说叫她带带我们怎么买股票、基金、黄金这些东西呢。后来在群里偶尔聊下这方面的东西！</p><h3 id="黄金"><a href="#黄金" class="headerlink" title="黄金"></a>黄金</h3><p>那时我第才开始接触黄金，也是自己一个人买了点支付宝里面的存金宝，（不多，就几百块），后来慢慢的加仓和减仓，刚开始的时候，因为是刚上手这些东西，比较对这每天的数字增长和降低很在意，一天打开蚂蚁聚宝的次数很多，老是看着每天的实时参考金价，反正就是心理各种不踏实。就是那种患得患失的感觉，哈哈，我也不知道怎么形容了。。。😳</p><p>那时也不懂，老是追涨低抛，没有打算长期持有。附图：</p><p><img src="http://ohfk1r827.bkt.clouddn.com/1510975499100.jpg-1" alt=""></p><p>现在看看这图，想想自己以前真傻。可以发现现在已经没买黄金了，对，在今年的时候主要是关注些基金！</p><h3 id="基金"><a href="#基金" class="headerlink" title="基金"></a>基金</h3><p>通过买黄金，发现，黄金增长下跌确实不怎么那么尽人意，只赚了一点点。然后慢慢在关注着基金，发现有些基金的还是收入效果还是很好的。</p><p>什么是基金呢？</p><p>好像有很多种，但是我的理解是，我们散户有点闲钱，打算投资，又没时间去买股票，一是缺乏经验，不知道买哪支，而是没空去整天盯着股票的走势。这时就出现了一个平台，我们散户把钱投给这个平台，平台有专业的人去进行买股票，如买股票有盈利，则大家一起赚钱，如果亏，则一起亏，我对基金就是这样的理解，也不知道对不对？</p><p>再说说我现在主要买的基金吧，看看收益图：</p><p><img src="http://ohfk1r827.bkt.clouddn.com/1510976848761.jpg-1" alt=""></p><p><img src="http://ohfk1r827.bkt.clouddn.com/1510976875638.jpg-1" alt=""></p><p><img src="http://ohfk1r827.bkt.clouddn.com/1510976815189.jpg-1" alt=""></p><p>嘿嘿，这几个是我观察很久了，并觉得长期看好的基金了，当然以前也买过一两个基金，有个亏得不少，有涨有跌，现在觉得又要平常心，如果是长期看好的，没必要纠结这一两天的涨跌，等过段时间再来看看效果咋样（心态一定要好），如果遇到被套的话，有时也需要装死心态，哈哈！另外，我还自选了一批基金，正在观察中，等有时间把觉得还行的给统计下！</p><h3 id="股票"><a href="#股票" class="headerlink" title="股票"></a>股票</h3><p>这个不太懂，不过目前觉得我自己公司的股票也还不错，打算看什么时候有机会买点，这东西都是靠自己慢慢研究出来的，然后就是看看高人指点，我倒是关注了点微信公众号讲这方面的知识，微博也关注了几个，在蚂蚁财富里面也关注些，觉得有些还是很靠谱的，还是一样，有时间继续做个统计，然后发在我的小密圈里面。</p><h3 id="友金所"><a href="#友金所" class="headerlink" title="友金所"></a>友金所</h3><p>投了这个是因为进 stormzhang 的小密圈，通过注册并投资点可以免费进他的小密圈，不然得花 199 元，这算很优惠了。因为是新用户，所以这个收益很高，一个月期限，12% 的收益！</p><h3 id="余额宝"><a href="#余额宝" class="headerlink" title="余额宝"></a>余额宝</h3><p>支付宝里的，平常钱也一般放这里面，因为平时用支付宝比较多，放这里，可以付款的时候选择直接余额宝支付，另外还有差不多 4% 的收益，可以随时存取，比较方便！</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>有时间将上面所说的：自选基金列表、微信公众号、微博这几个列表发在我的小密圈里。</p><p>最重要的话还是得说三遍：</p><p><strong>投资有风险，需谨慎！</strong></p><p><strong>投资有风险，需谨慎！</strong></p><p><strong>投资有风险，需谨慎！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/p5.jpeg-1&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="投资理财" scheme="http://yoursite.com/tags/%E6%8A%95%E8%B5%84%E7%90%86%E8%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>基于分布式环境下限流系统的设计</title>
    <link href="http://yoursite.com/2017/11/18/flow-control/"/>
    <id>http://yoursite.com/2017/11/18/flow-control/</id>
    <published>2017-11-17T16:00:00.000Z</published>
    <updated>2018-01-21T11:11:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/p1.jpeg-1" alt=""><br><a id="more"></a></p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><h4 id="业务背景"><a href="#业务背景" class="headerlink" title="业务背景"></a>业务背景</h4><p>就拿前些天的双十一的 “抢券活动” 来说，一般是设置整点开始抢的，你想想，淘宝的用户群体非常大，可以达到亿级别，而服务接口每秒能处理的量是有限的，那么这个时候问题就会出现，我们如何通过程序来控制用户抢券呢，于是就必须加上这个限流功能了。</p><h4 id="生产环境"><a href="#生产环境" class="headerlink" title="生产环境"></a>生产环境</h4><p>1、服务接口所能提供的服务上限（limit）假如是 500次/s</p><p>2、用户请求接口的次数未知，QPS可能达到 800次/s，1000次/s，或者更高</p><p>3、当服务接口的访问频率超过 500次/s，超过的量将拒绝服务，多出的信息将会丢失</p><p>4、线上环境是多节点部署的，但是调用的是同一个服务接口</p><p>于是，为了保证服务的可用性，就要对服务接口调用的速率进行限制（接口限流）。</p><h3 id="什么是限流？"><a href="#什么是限流？" class="headerlink" title="什么是限流？"></a>什么是限流？</h3><p>限流是对系统的<strong>出入流量</strong>进行<strong>控制</strong>，防止大流量出入，导致<strong>资源</strong>不足，系统不稳定。</p><p>限流系统是对资源访问的控制组件，控制主要的两个功能：<strong>限流策略</strong>和<strong>熔断策略</strong>，对于熔断策略，不同的系统有不同的熔断策略诉求，有的系统希望直接拒绝、有的系统希望排队等待、有的系统希望服务降级、有的系统会定制自己的熔断策略，这里只针对<strong>限流策略</strong>这个功能做详细的设计。</p><h3 id="限流算法"><a href="#限流算法" class="headerlink" title="限流算法"></a>限流算法</h3><h4 id="1、限制瞬时并发数"><a href="#1、限制瞬时并发数" class="headerlink" title="1、限制瞬时并发数"></a>1、限制瞬时并发数</h4><p>Guava RateLimiter 提供了令牌桶算法实现：平滑突发限流(SmoothBursty)和平滑预热限流(SmoothWarmingUp)实现。</p><h4 id="2、限制某个接口的时间窗最大请求数"><a href="#2、限制某个接口的时间窗最大请求数" class="headerlink" title="2、限制某个接口的时间窗最大请求数"></a>2、限制某个接口的时间窗最大请求数</h4><p>即一个时间窗口内的请求数，如想限制某个接口/服务每秒/每分钟/每天的请求数/调用量。如一些基础服务会被很多其他系统调用，比如商品详情页服务会调用基础商品服务调用，但是怕因为更新量比较大将基础服务打挂，这时我们要对每秒/每分钟的调用量进行限速；一种实现方式如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">LoadingCache&lt;Long, AtomicLong&gt; counter =</span><br><span class="line">        CacheBuilder.newBuilder()</span><br><span class="line">                .expireAfterWrite(<span class="number">2</span>, TimeUnit.SECONDS)</span><br><span class="line">                .build(<span class="keyword">new</span> CacheLoader&lt;Long, AtomicLong&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> AtomicLong <span class="title">load</span><span class="params">(Long seconds)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> AtomicLong(<span class="number">0</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"><span class="keyword">long</span> limit = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">    <span class="comment">//得到当前秒</span></span><br><span class="line">    <span class="keyword">long</span> currentSeconds = System.currentTimeMillis() / <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">if</span>(counter.get(currentSeconds).incrementAndGet() &gt; limit) &#123;</span><br><span class="line">        System.out.println(<span class="string">"限流了:"</span> + currentSeconds);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//业务处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用Guava的Cache来存储计数器，过期时间设置为2秒（保证1秒内的计数器是有的），然后我们获取当前时间戳然后取秒数来作为KEY进行计数统计和限流，这种方式也是简单粗暴，刚才说的场景够用了。</p><h4 id="3、令牌桶"><a href="#3、令牌桶" class="headerlink" title="3、令牌桶"></a>3、令牌桶</h4><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1flk2kudl1oj318w0ymwgp.jpg" alt=""></p><p>算法描述：</p><ul><li>假如用户配置的平均发送速率为r，则每隔1/r秒一个令牌被加入到桶中</li><li>假设桶中最多可以存放b个令牌。如果令牌到达时令牌桶已经满了，那么这个令牌会被丢弃</li><li>当流量以速率v进入，从桶中以速率v取令牌，拿到令牌的流量通过，拿不到令牌流量不通过，执行熔断逻辑</li></ul><p><strong>属性</strong></p><ul><li>长期来看，符合流量的速率是受到令牌添加速率的影响，被稳定为：r</li><li>因为令牌桶有一定的存储量，可以抵挡一定的流量突发情况<ul><li>M是以字节/秒为单位的最大可能传输速率。 M&gt;r</li><li>T max = b/(M-r) 承受最大传输速率的时间</li><li>B max = T max * M 承受最大传输速率的时间内传输的流量</li></ul></li></ul><p><strong>优点</strong>：流量比较平滑，并且可以抵挡一定的流量突发情况</p><h4 id="4、Google-guava-提供的工具库中-RateLimiter-类（内部也是采用令牌桶算法实现）"><a href="#4、Google-guava-提供的工具库中-RateLimiter-类（内部也是采用令牌桶算法实现）" class="headerlink" title="4、Google guava 提供的工具库中 RateLimiter 类（内部也是采用令牌桶算法实现）"></a>4、Google guava 提供的工具库中 RateLimiter 类（内部也是采用令牌桶算法实现）</h4><p>最快的方式是使用 RateLimit 类，但是这仅限制在单节点，如果是分布式系统，每个节点的 QPS 是一样的，请求量到服务接口那的话就是 QPS * 节点数 了。所以这种方案在分布式的情况下不适用！</p><h4 id="5、基于-Redis-实现，存储两个-key，一个用于计时，一个用于计数。请求每调用一次，计数器增加-1，若在计时器时间内计数器未超过阈值，则可以处理任务。"><a href="#5、基于-Redis-实现，存储两个-key，一个用于计时，一个用于计数。请求每调用一次，计数器增加-1，若在计时器时间内计数器未超过阈值，则可以处理任务。" class="headerlink" title="5、基于 Redis 实现，存储两个 key，一个用于计时，一个用于计数。请求每调用一次，计数器增加 1，若在计时器时间内计数器未超过阈值，则可以处理任务。"></a>5、基于 Redis 实现，存储两个 key，一个用于计时，一个用于计数。请求每调用一次，计数器增加 1，若在计时器时间内计数器未超过阈值，则可以处理任务。</h4><p>这种能够很好地解决了分布式环境下多实例所导致的并发问题。因为使用redis设置的计时器和计数器均是全局唯一的，不管多少个节点，它们使用的都是同样的计时器和计数器，因此可以做到非常精准的流控。</p><p>代码就不公布了，毕竟涉及公司隐私了。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>参考文章：</p><p><a href="https://www.zybuluo.com/kay2/note/949160" target="_blank" rel="noopener">基于Redis的限流系统的设计</a></p><p>感兴趣的可以看看别人的代码是怎么写的：<a href="https://github.com/wukq/rate-limiter" target="_blank" rel="noopener">https://github.com/wukq/rate-limiter</a></p><p>转载请注明文章地址为：<a href="http://www.54tianzhisheng.cn/2017/11/18/flow-control/" target="_blank" rel="noopener">http://www.54tianzhisheng.cn/2017/11/18/flow-control/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/p1.jpeg-1&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
      <category term="流控" scheme="http://yoursite.com/tags/%E6%B5%81%E6%8E%A7/"/>
    
  </entry>
  
</feed>
